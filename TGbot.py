import os 
import sqlite3
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackContext,
)
import logging
import pytz  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from pytz import timezone as pytz_timezone

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS = ["user1"] #–í—Å—Ç–∞–≤—å —é–∑–µ—Ä–Ω–µ–π–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä ["user1", "user2"]
# –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
LEVEL_CODES = {
    "–¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ!": "‚ùå –¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ! ‚ùå",
    "–°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –∫ –∑–Ω–∞–Ω–∏—è–º": "ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!ü§ù",
    "–£—Å–µ—Ä–¥–∏–µ": "üëç–ó–∞—â–∏—Ç–∏–ª –ø–µ—Ä–≤—ã–π –±–ª–æ–∫!üëç",
    "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": "‚úä–ó–∞—â–∏—Ç–∏–ª –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫!‚úä",
    "–ü—Ä–æ–≥—Ä–µ—Å—Å": "üí™–ó–∞—â–∏—Ç–∏–ª —Ç—Ä–µ—Ç–∏–π –±–ª–æ–∫!üí™",
    "–£–º–µ–Ω–∏–µ —É—á–∏—Ç—å—Å—è": "üî•–ó–∞—â–∏—Ç–∏–ª —á–µ—Ç–≤—ë—Ä—Ç—ã–π –±–ª–æ–∫!üî•",
    "–û—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã": "üéâ–ó–∞—â–∏—Ç–∏–ª –ø—è—Ç—ã–π –±–ª–æ–∫!üéâ",
    "–¢—Ä—É–¥–æ–ª—é–±–∏–µ": "ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥",
    "–ê–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è": "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ",
    "–Ø –û–ô–¢–ò–®–ù–ò–ö!": "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è"
}

# –ü–æ–æ—â—Ä–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
LEVEL_REWARDS = {
    "ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!ü§ù": "ü§ù–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!ü§ù \nüò∫–¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —É—Å–ø–µ—Ö—É!üò∫",
    "üëç–ó–∞—â–∏—Ç–∏–ª –ø–µ—Ä–≤—ã–π –±–ª–æ–∫!üëç": "üòé–¢—ã –∫—Ä—É—Ç!üòé \nüòè–ü—Ä–æ–¥–æ–ª–∂–∞–π —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!üòè",
    "‚úä–ó–∞—â–∏—Ç–∏–ª –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫!‚úä": "‚úä–¢—ã –¥–≤–∏–∂–µ—à—å—Å—è –≤–ø–µ—Ä—ë–¥!‚úä \nüí™–ù–µ –æ—Å—Ç–∞–Ω–∞—á–∏–≤–∞–π—Å—è!üí™",
    "üí™–ó–∞—â–∏—Ç–∏–ª —Ç—Ä–µ—Ç–∏–π –±–ª–æ–∫!üí™": "üí•–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!üí• \nüèÖ–¢—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ—à—å –æ—Ç–ª–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã!üèÖ",
    "üî•–ó–∞—â–∏—Ç–∏–ª —á–µ—Ç–≤—ë—Ä—Ç—ã–π –±–ª–æ–∫!üî•": "‚úîÔ∏è–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!‚úîÔ∏è \nü¶æ–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!ü¶æ",
    "üéâ–ó–∞—â–∏—Ç–∏–ª –ø—è—Ç—ã–π –±–ª–æ–∫!üéâ": "üòÉ–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ!üòÉ \n‚≠êÔ∏è–¢—ã –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è!‚≠êÔ∏è",
    "ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥": "üôÄ–¢—ã —É–∂–µ –ø–æ—á—Ç–∏ –Ω–∞ —Ñ–∏–Ω–∏—à–µ!üôÄ \nüí™–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!üí™",
    "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ": "üéä–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéä \nüéâ–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!üéâ",
    "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è": "üéä–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!üéä \nüéâ–¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª!üéâ"
}

LEVEL_ORDER = [
    "‚ùå –¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ! ‚ùå",
    "ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!ü§ù",
    "üëç–ó–∞—â–∏—Ç–∏–ª –ø–µ—Ä–≤—ã–π –±–ª–æ–∫!üëç",
    "‚úä–ó–∞—â–∏—Ç–∏–ª –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫!‚úä",
    "üí™–ó–∞—â–∏—Ç–∏–ª —Ç—Ä–µ—Ç–∏–π –±–ª–æ–∫!üí™",
    "üî•–ó–∞—â–∏—Ç–∏–ª —á–µ—Ç–≤—ë—Ä—Ç—ã–π –±–ª–æ–∫!üî•",
    "üéâ–ó–∞—â–∏—Ç–∏–ª –ø—è—Ç—ã–π –±–ª–æ–∫!üéâ",
    "ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥",
    "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ",
    "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è"
]

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
database_initialized = False

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
def create_database():
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É users, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY,
            username TEXT UNIQUE,
            full_name TEXT,
            is_admin BOOLEAN DEFAULT FALSE,
            level TEXT DEFAULT '‚ùå –¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ! ‚ùå',
            joined_at TEXT,
            status TEXT DEFAULT '–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è',
            is_blocked BOOLEAN DEFAULT FALSE,
            chat_id INTEGER UNIQUE
        );
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É schedule, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS schedule (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            event_name TEXT,
            event_date TEXT,
            event_time TEXT,
            is_blocked_day BOOLEAN DEFAULT FALSE,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É progress, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS progress (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            level TEXT,
            completed_at TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É reminders, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reminders (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            reminder_type TEXT,
            reminder_time TEXT,  -- –•—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM
            reminder_text TEXT,
            last_sent_date TEXT,  -- –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            user_meeting_reminder_minutes INTEGER,
            meeting_reminder_minutes INTEGER,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É reminders, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS sent_reminders (
            id INTEGER PRIMARY KEY,
            user_id INTEGER,
            event_date TEXT,
            event_time TEXT,
            FOREIGN KEY (user_id) REFERENCES users (id)
        );
    ''')

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É questions, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS questions (
            id INTEGER PRIMARY KEY,
            block INTEGER,
            question_text TEXT UNIQUE,
            option1 TEXT,
            option2 TEXT,
            option3 TEXT,
            option4 TEXT,
            correct_option INTEGER
        );
    ''')

    conn.commit()
    conn.close()
    

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
    database_initialized = True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    if not os.path.exists('bot_database.db'):
        create_database()
    conn = sqlite3.connect('bot_database.db')
    conn.row_factory = sqlite3.Row
    return conn

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(username):
    return username in ADMINS
    
def get_moscow_time():
    return datetime.now(MOSCOW_TZ)
    logger.warning("–í—Ä–µ–º—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ")

# –¢–∞–π–º-–∞—É—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è (5 –º–∏–Ω—É—Ç)
STATE_TIMEOUT = timedelta(minutes=5)

# –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
def update_last_active(context: CallbackContext):
    context.user_data['last_active'] = datetime.now().isoformat()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º-–∞—É—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
async def check_state_timeout(context: CallbackContext):
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ check_state_timeout")
    try:
        if context.job is None or context.job.data is None:
            logger.warning("context.job –∏–ª–∏ context.job.data —Ä–∞–≤–µ–Ω None. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        user_data = context.job.data.get("user_data")
        if user_data is None:
            logger.warning("user_data —Ä–∞–≤–µ–Ω None. –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
            return

        if 'last_active' not in user_data:
            logger.warning("–ö–ª—é—á 'last_active' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ user_data")
            return

        last_active = datetime.fromisoformat(user_data['last_active'])
        logger.info(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}")

        if datetime.now() - last_active > STATE_TIMEOUT:
            logger.info("–¢–∞–π–º-–∞—É—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è: –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            user_data.clear()
            await context.bot.send_message(
                chat_id=user_data.get('user_id'),
                text="‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.üòä"
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_state_timeout: {e}", exc_info=True)

async def register_admins(context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    for admin in ADMINS:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute('SELECT id FROM users WHERE username = ?', (admin,))
        admin_data = cursor.fetchone()
        if admin_data:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ chat_id
            cursor.execute('UPDATE users SET chat_id = ? WHERE username = ?', (admin_data['id'], admin))
        else:
            # –ï—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            cursor.execute('INSERT INTO users (username, is_admin) VALUES (?, ?)', (admin, True))
    conn.commit()
    conn.close()


# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if 'menu_stack' in context.user_data:
            context.user_data['menu_stack'].clear()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user
        user = update.effective_user
        logger.info(f"User {user.username} started the bot.")

        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if is_admin(user.username):
            cursor.execute("UPDATE users SET chat_id = ? WHERE username = ?", (user.id, user.username))
            conn.commit()
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.username} (chat_id: {user.id})")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT full_name FROM users WHERE id = ?", (user.id,))
        full_name = cursor.fetchone()
        logger.info(f"Fetched full_name: {full_name}")

        if not full_name or not full_name[0]:
            logger.info("No full_name found, requesting registration.")
            await update.effective_message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è! \nü§ù –í–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–§–∞–º–∏–ª–∏—è –ò–º—è. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω.")
            context.user_data['step'] = 'get_full_name'
            context.user_data['user_id'] = user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            return

        logger.info("Full_name found, showing main menu.")
        keyboard = [
            [InlineKeyboardButton("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='schedule'), InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data='progress')],
            [InlineKeyboardButton("üéì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data='testing'),InlineKeyboardButton("üÜò –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å", callback_data='help')]
        ]
        if is_admin(user.username):
            keyboard.append([InlineKeyboardButton("üëë –ê–¥–º–∏–Ω", callback_data='admin')])
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        if update.callback_query:
            await update.callback_query.edit_message_text(text='üìã –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ: \n\nP.S.\n"–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è  –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –∞ –∑–∞—Ç–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏: "STOP"', reply_markup=reply_markup)
        else:
            await update.effective_message.reply_text('üëã –í—ã–±–∏—Ä–∞–π —á–µ–º —Ö–æ—á–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:', reply_markup=reply_markup)

        context.user_data['user_id'] = user.id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)

    finally:
        if conn:
            conn.close()

async def stop_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context.user_data.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await start(update, context)

async def stop_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop."""
    await stop_handler(update, context)

# –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def schedule_menu(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å—Ç–µ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if 'menu_stack' not in context.user_data:
        context.user_data['menu_stack'] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –µ—â–µ –Ω–µ –≤ —Å—Ç–µ–∫–µ
    if not context.user_data['menu_stack'] or context.user_data['menu_stack'][-1] != schedule_menu:
        context.user_data['menu_stack'].append(schedule_menu)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é 'schedule_menu' –≤ —Å—Ç–µ–∫. –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫: {[func.__name__ for func in context.user_data['menu_stack']]}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    keyboard = [
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data='view_schedule'), InlineKeyboardButton("‚úÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data='add_event')],
        [InlineKeyboardButton("üìÖ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏", callback_data='my_events'), InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É", callback_data='reschedule_event')],
        [InlineKeyboardButton("‚è™ –ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏", callback_data='past_events'), InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É", callback_data='delete_event')],
        [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='user_reminders')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.edit_message_text(text="üìÖ –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=reply_markup)
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –ú–µ–Ω—é –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def progress_menu(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å—Ç–µ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if 'menu_stack' not in context.user_data:
        context.user_data['menu_stack'] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –µ—â–µ –Ω–µ –≤ —Å—Ç–µ–∫–µ
    if not context.user_data['menu_stack'] or context.user_data['menu_stack'][-1] != progress_menu:
        context.user_data['menu_stack'].append(progress_menu)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é 'progress_menu' –≤ —Å—Ç–µ–∫. –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫: {[func.__name__ for func in context.user_data['menu_stack']]}")

    keyboard = [
        [InlineKeyboardButton("üìà –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data='view_progress')],
        [InlineKeyboardButton("üöÄ –ü–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data='level_up')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
    current_text = "–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:"
    if query.message.text != current_text or query.message.reply_markup != reply_markup:
        await query.edit_message_text(text=current_text, reply_markup=reply_markup)
    else:
        logger.info("üîç –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. üòâ")

    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def level_up(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üöÄ –•–æ—á–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å? –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∏–∂–µ:")
    context.user_data['step'] = 'get_level_code'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def start_testing(query, context):
    user = query.from_user
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT level FROM users WHERE username = ?', (user.username,))
    user_data = cursor.fetchone()
    conn.close()

    if not user_data:
        await query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    user_level = user_data['level']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
    if user_level in ["ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥", "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ", "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è"]:
        if user_level == "ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥":
            await query.edit_message_text("–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ —Ç–µ—Å—Ç—ã, –∑–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏ —Ç–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!")
        elif user_level == "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ":
            await query.edit_message_text("–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ —Ç–µ—Å—Ç—ã, –∑–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ! –¢–µ–±–µ –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É!")
        elif user_level == "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è":
            await query.edit_message_text("–¢—ã –º–æ–ª–æ–¥–µ—Ü! –¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –≤—Å–µ —Ç–µ—Å—Ç—ã –∏ —Å—Ç–∞–ª –Ω–µ—Ä–µ–∞–ª—å–Ω–æ –∫—Ä—É—Ç—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º!")
        
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(reply_markup=reply_markup)
        return

    if user_level == '‚ùå –¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ! ‚ùå':
        await query.edit_message_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–≤—ã—Å—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å! üöÄ")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–ª–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    block = get_block_from_level(user_level)
    if not block:
        await query.edit_message_text("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ç–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è. –ü—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è! üí™")
        return

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    questions = get_random_questions(block)
    if not questions:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ. üòä", reply_markup=reply_markup)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['questions'] = questions
    context.user_data['current_question'] = 0
    context.user_data['answers'] = []

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await show_question(query, context)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–ª–æ–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_block_from_level(level):
    level_to_block = {
        "‚ùå –¢—ã –ø–æ–∫–∞ –Ω–µ –æ–±—É—á–∞–µ—à—å—Å—è –Ω–∞ –∫—É—Ä—Å–µ! –ü—Ä–∏—Å—Ç—É–ø–∞–π —Å–∫–æ—Ä–µ–µ! ‚ùå": None,
        "ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!ü§ù": 1,
        "üëç–ó–∞—â–∏—Ç–∏–ª –ø–µ—Ä–≤—ã–π –±–ª–æ–∫!üëç": 2,
        "‚úä–ó–∞—â–∏—Ç–∏–ª –≤—Ç–æ—Ä–æ–π –±–ª–æ–∫!‚úä": 3,
        "üí™–ó–∞—â–∏—Ç–∏–ª —Ç—Ä–µ—Ç–∏–π –±–ª–æ–∫!üí™": 4,
        "üî•–ó–∞—â–∏—Ç–∏–ª —á–µ—Ç–≤—ë—Ä—Ç—ã–π –±–ª–æ–∫!üî•": 5,
        "üéâ–ó–∞—â–∏—Ç–∏–ª –ø—è—Ç—ã–π –±–ª–æ–∫!üéâ": 6,
        "ü•≥–ó–∞—â–∏—Ç–∏–ª —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!ü•≥": None,
        "üéâ–ü—Ä–æ—à—ë–ª —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ!üéâ": None,
        "ü¶∏‚Äç‚ôÇÔ∏è–ö–æ–ª–ª–µ–≥–∞!ü¶∏‚Äç‚ôÇÔ∏è": None,
    }
    return level_to_block.get(level)
    
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–ª–æ–∫–∞
def get_random_questions(block, limit=10):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM questions WHERE block = ? ORDER BY RANDOM() LIMIT ?', (block, limit))
    questions = cursor.fetchall()
    conn.close()
    return questions
    
# –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
async def show_question(query, context):
    questions = context.user_data['questions']
    current_question = context.user_data['current_question']
    question = questions[current_question]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞
    question_text = f"–í–æ–ø—Ä–æ—Å {current_question + 1}:\n{question['question_text']}\n\n"
    options = [question['option1'], question['option2'], question['option3'], question['option4']]
    for i, option in enumerate(options, start=1):
        question_text += f"{i}. {option}\n"

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    keyboard = [
        [InlineKeyboardButton(str(i), callback_data=f"answer_{i}") for i in range(1, 5)],  # –ö–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(question_text, reply_markup=reply_markup)
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        query = update.callback_query
        await query.answer()

        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        answer = int(query.data.split("_")[1])
        context.user_data['answers'].append(answer)

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        context.user_data['current_question'] += 1
        if context.user_data['current_question'] < len(context.user_data['questions']):
            await show_question(query, context)
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç –∏ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await finish_test(query, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_answer: {e}", exc_info=True)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()
        
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async def finish_test(query, context):
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        questions = context.user_data['questions']
        answers = context.user_data['answers']
        correct_answers = 0
        wrong_questions = []

        for i, question in enumerate(questions):
            if answers[i] == question['correct_option']:
                correct_answers += 1
            else:
                wrong_questions.append(question['question_text'])

        total_questions = len(questions)
        result = "üéâ –¢—ã —Å–¥–∞–ª(–∞)! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! üéâ" if (correct_answers / total_questions) > 0.81 else "‚ùå –£–≤—ã, –Ω–æ —Ç—ã –Ω–µ —Å–¥–∞–ª(–∞). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üí™"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        statistics = f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {correct_answers} –∏–∑ {total_questions}\n"
        statistics += f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã: {total_questions - correct_answers}\n"
        if wrong_questions:
            statistics += "üìù –í–æ–ø—Ä–æ—Å—ã —Å –æ—à–∏–±–∫–∞–º–∏:\n"
            for i, question in enumerate(wrong_questions, start=1):
                statistics += f"{i}. {question}\n"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã —É–º–Ω–∏—á–∫–∞! üéâ\n{result}\n{statistics}", reply_markup=reply_markup)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await notify_admins(query.from_user, result, statistics, context)

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
        context.user_data.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ finish_test: {e}", exc_info=True)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()
    
# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
async def notify_admins(user, result, statistics, context):    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        message = f"‚úÖ {user.full_name} (@{user.username}) –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç!\n"
        message += f"–ï–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
        message += f"–ï–≥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{statistics}"

        cursor.execute('SELECT username, chat_id FROM users WHERE is_admin = TRUE')
        admins = cursor.fetchall()
        conn.close()

        if not admins:
            logger.error("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        for admin in admins:
            chat_id = admin['chat_id']
            username = admin['username']
            if not chat_id:
                logger.error(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {username} –Ω–µ –∏–º–µ–µ—Ç chat_id.")
                continue

            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {username} (chat_id: {chat_id}).")
            try:
                await context.bot.send_message(chat_id=chat_id, text=message)
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {username} (chat_id: {chat_id}).")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {username} (chat_id: {chat_id}): {e}")
                
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {username} (chat_id: {chat_id}): {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ notify_admins: {e}", exc_info=True)

    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()
            
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def add_question(query, context):
    message = (
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–í–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –í–∞—Ä–∏–∞–Ω—Ç4 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (1-4) | –ë–ª–æ–∫\n\n"
        "–ü—Ä–∏–º–µ—Ä 1:\n"
        "–ß—Ç–æ —Ç–∞–∫–æ–µ Python? | –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è | –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö | –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ | –§—Ä–µ–π–º–≤–æ—Ä–∫ | 1 | 1\n\n"
        "–ü—Ä–∏–º–µ—Ä 2:\n"
        "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª? | int | str | float | bool | 1 | 2"
    )
    await query.edit_message_text(message)
    context.user_data['awaiting_add_question'] = True
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
async def handle_add_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    parts = text.split('|')
    if len(parts) != 7:
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
        return

    question_text = parts[0].strip()
    option1 = parts[1].strip()
    option2 = parts[2].strip()
    option3 = parts[3].strip()
    option4 = parts[4].strip()
    correct_option = int(parts[5].strip())
    block = int(parts[6].strip())

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ questions
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='questions'")
        if not cursor.fetchone():
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ questions –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã
        cursor.execute("PRAGMA table_info(questions)")
        columns = [column[1] for column in cursor.fetchall()]
        required_columns = ["block", "question_text", "option1", "option2", "option3", "option4", "correct_option"]
        for column in required_columns:
            if column not in columns:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: –°—Ç–æ–ª–±–µ—Ü {column} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ questions.")
                return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å
        cursor.execute('SELECT * FROM questions WHERE question_text = ?', (question_text,))
        if cursor.fetchone():
            await update.message.reply_text("–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        cursor.execute('''
            INSERT INTO questions (block, question_text, option1, option2, option3, option4, correct_option)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (block, question_text, option1, option2, option3, option4, correct_option))
        conn.commit()

        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–∞: {parts}")

        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_add_question: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data.pop('awaiting_add_question', None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await start(update, context)
    
# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def edit_question(query, context):
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                 "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ | –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –í–∞—Ä–∏–∞–Ω—Ç4 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (1-4) | –ë–ª–æ–∫")
    context.user_data['awaiting_edit_question'] = True
    
async def handle_edit_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    parts = text.split('|')
    if len(parts) != 8:
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
        return

    old_question_text = parts[0].strip()
    new_question_text = parts[1].strip()
    option1 = parts[2].strip()
    option2 = parts[3].strip()
    option3 = parts[4].strip()
    option4 = parts[5].strip()
    correct_option = int(parts[6].strip())
    block = int(parts[7].strip())

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
        cursor.execute('SELECT * FROM questions WHERE question_text = ?', (old_question_text,))
        if not cursor.fetchone():
            await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        cursor.execute('''
            UPDATE questions
            SET question_text = ?, option1 = ?, option2 = ?, option3 = ?, option4 = ?, correct_option = ?, block = ?
            WHERE question_text = ?
        ''', (new_question_text, option1, option2, option3, option4, correct_option, block, old_question_text))
        conn.commit()

        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_question: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data.pop('awaiting_edit_question', None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await start(update, context)
    
# –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
async def delete_question(query, context):
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    context.user_data['awaiting_delete_question'] = True
    
async def handle_delete_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question_text = update.message.text.strip()

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å
        cursor.execute('SELECT * FROM questions WHERE question_text = ?', (question_text,))
        if not cursor.fetchone():
            await update.message.reply_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
        cursor.execute('DELETE FROM questions WHERE question_text = ?', (question_text,))
        conn.commit()

        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_question: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data.pop('awaiting_delete_question', None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await start(update, context)
    
# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def view_all_questions(query, context, page=0):
    conn = get_db_connection()
    cursor = conn.cursor()
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    cursor.execute('SELECT * FROM questions ORDER BY block, id LIMIT 15 OFFSET ?', (page * 15,))
    questions = cursor.fetchall()
    conn.close()

    if not questions:
        # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", reply_markup=reply_markup)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    questions_text = "üìö –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
    current_block = None

    for question in questions:
        if question['block'] != current_block:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫
            if current_block is not None:
                questions_text += "\n"
            questions_text += f"üìñ –ë–ª–æ–∫ {question['block']}:\n"
            current_block = question['block']
        questions_text += f"{question['id']}. {question['question_text']}\n"

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    keyboard = []
    if page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_all_questions_{page - 1}")])
    if len(questions) == 15:
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"view_all_questions_{page + 1}")])
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await query.edit_message_text(questions_text, reply_markup=reply_markup)
    
# –ü—Ä–æ—Å–º–æ—Ç—Ä —É—Ä–æ–≤–Ω–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def view_user_levels(query, context):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute('SELECT username, level FROM users')
    users = cursor.fetchall()
    conn.close()

    if not users:
        await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —É—Ä–æ–≤–Ω—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    levels_text = "–£—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        levels_text += f"@{user['username']}: {user['level']}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(levels_text, reply_markup=reply_markup)
    
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def change_user_level(query, context):
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, user123 ü§ù–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∫—É—Ä—Å!ü§ù):")
    context.user_data['awaiting_change_user_level'] = True
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_change_user_level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    parts = text.split()
    if len(parts) < 2:
        await update.message.reply_text("‚ùå –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
        return

    username = parts[0]
    new_level = ' '.join(parts[1:])

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute('SELECT id FROM users WHERE username = ?', (username,))
        user_data = cursor.fetchone()
        if not user_data:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute('UPDATE users SET level = ? WHERE username = ?', (new_level, username))
        conn.commit()

        await update.message.reply_text(f"‚úÖ –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_level}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_change_user_level: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data.pop('awaiting_change_user_level', None)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await start(update, context)
    
# –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
async def bulk_add_questions(query, context):
    await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                                 "–í–æ–ø—Ä–æ—Å1 | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –í–∞—Ä–∏–∞–Ω—Ç4 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (1-4) | –ë–ª–æ–∫\n"
                                 "–í–æ–ø—Ä–æ—Å2 | –í–∞—Ä–∏–∞–Ω—Ç1 | –í–∞—Ä–∏–∞–Ω—Ç2 | –í–∞—Ä–∏–∞–Ω—Ç3 | –í–∞—Ä–∏–∞–Ω—Ç4 | –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (1-4) | –ë–ª–æ–∫\n\n"
                                 "–ü—Ä–∏–º–µ—Ä:\n"
                                 "–ß—Ç–æ —Ç–∞–∫–æ–µ Python? | –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è | –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö | –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ | –§—Ä–µ–π–º–≤–æ—Ä–∫ | 1 | 1\n"
                                 "–ö–∞–∫–æ–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª? | int | str | float | bool | 1 | 2")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data['awaiting_bulk_add_questions'] = True
    
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_bulk_add_questions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    questions = text.split('\n')

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        for question in questions:
            parts = question.split('|')
            if len(parts) != 7:
                await update.message.reply_text(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞: {question}")
                continue

            question_text = parts[0].strip()
            option1 = parts[1].strip()
            option2 = parts[2].strip()
            option3 = parts[3].strip()
            option4 = parts[4].strip()
            correct_option = int(parts[5].strip())
            block = int(parts[6].strip())

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å
            cursor.execute('SELECT * FROM questions WHERE question_text = ?', (question_text,))
            if cursor.fetchone():
                await update.message.reply_text(f"–û—à–∏–±–∫–∞: –í–æ–ø—Ä–æ—Å '{question_text}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                continue

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å
            cursor.execute('''
                INSERT INTO questions (block, question_text, option1, option2, option3, option4, correct_option)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (block, question_text, option1, option2, option3, option4, correct_option))

            logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions}")

        conn.commit()
        await update.message.reply_text("‚úÖ –í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bulk_add_questions: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.")
    finally:
        if conn:
            conn.close()
            
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
    context.user_data.pop('awaiting_bulk_add_questions', None)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
    await start(update, context)

async def manage_testing(query, context):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='add_question')],
        [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='edit_question')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data='delete_question')],
        [InlineKeyboardButton("üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data='view_all_questions_0')],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–≤–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='view_user_levels')],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='change_user_level')],
        [InlineKeyboardButton("üìö –ú–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data='bulk_add_questions')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='admin')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û
async def handle_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        full_name = update.message.text
        user = update.effective_user

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        logger.info(f"User {user.username} provided full_name: {full_name}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        is_admin_user = is_admin(user.username)

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        logger.info(f"–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: username={user.username}, is_admin={is_admin_user}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT OR REPLACE INTO users (id, username, full_name, is_admin, joined_at) VALUES (?, ?, ?, ?, ?)",
            (user.id, user.username, full_name, is_admin_user, datetime.now().strftime('%Y-%m-%d'))
        )
        conn.commit()

        await update.message.reply_text(f"üéâ –û—Ç–ª–∏—á–Ω–æ, {full_name}! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω(–∞)! –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! üöÄ")
        await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_full_name: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def set_user_meeting_reminder_time(update: Update, context: CallbackContext):
    logger.info("–ö–Ω–æ–ø–∫–∞ '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' –Ω–∞–∂–∞—Ç–∞")
    await update.callback_query.edit_message_text("‚è∞ –•–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è? \n–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†30¬†(–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏).")
    context.user_data['step'] = 'get_user_meeting_reminder_time'
    update_last_active(context)

async def handle_user_meeting_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            minutes = int(update.message.text)
            if minutes < 0:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä:¬†30.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                "INSERT OR REPLACE INTO reminders (user_id, reminder_type, user_meeting_reminder_minutes) VALUES (?, ?, ?)",
                (update.effective_user.id, 'user_meeting_reminder', minutes)
            )
            conn.commit()

            logger.info(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {minutes} –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.username}")

            await update.message.reply_text(f"üîî –•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ –≤—Å—Ç—Ä–µ—á–∏! –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏! üïí")
            await start(update, context)
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_meeting_reminder_time: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

async def set_meeting_reminder_time(update: Update, context: CallbackContext):
    logger.info("–§—É–Ω–∫—Ü–∏—è set_meeting_reminder_time –≤—ã–∑–≤–∞–Ω–∞")
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö? –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú:")
    context.user_data['step'] = 'get_meeting_reminder_time'
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–≥: {context.user_data['step']}")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–≥
    update_last_active(context)

async def handle_meeting_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–§—É–Ω–∫—Ü–∏—è handle_meeting_reminder_time –≤—ã–∑–≤–∞–Ω–∞")
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            minutes = int(update.message.text)
            if minutes < 0:
                await update.message.reply_text("‚ùå –í—Ä–µ–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            cursor.execute(
                "INSERT OR REPLACE INTO reminders (user_id, reminder_type, meeting_reminder_minutes) VALUES (?, ?, ?)",
                (update.effective_user.id, 'meeting_reminder', minutes)
            )
            conn.commit()

            await update.message.reply_text(f"–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á!")
            await start(update, context)
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_meeting_reminder_time: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    if query.data == 'stop':
        await start(update, context)
        return

    if query.data == 'back':
        if 'menu_stack' in context.user_data and len(context.user_data['menu_stack']) > 1:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –∏–∑ —Å—Ç–µ–∫–∞
            context.user_data['menu_stack'].pop()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é –∏–∑ —Å—Ç–µ–∫–∞
            previous_menu = context.user_data['menu_stack'][-1]
            
            # –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            await previous_menu(update, context)
        else:
            # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –º–µ–Ω—é, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await start(update, context)
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    if query.data.startswith('schedule_page_'):
        page = int(query.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['schedule_page'] = page  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await view_schedule(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á
    if query.data.startswith('past_events_page_'):
        page = int(query.data.split('_')[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        context.user_data['past_events_page'] = page  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await past_events(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    if query.data == 'schedule':
        await schedule_menu(update, context)
    elif query.data == 'manage_users':
        await manage_users(update, context)
    elif query.data == 'list_users':
        await list_users(update, context)
    elif query.data == 'manage_statuses':
        await manage_statuses(update, context)
    elif query.data == 'delete_user':
        await delete_user(update, context)
    elif query.data == 'block_user':
        await block_user(update, context)
    elif query.data == 'progress':
        await progress_menu(update, context)
    elif query.data == 'help':
        await request_help(update, context)
    elif query.data == 'admin':
        await admin_menu(update, context)
    elif query.data == 'add_event':
        await add_event(update, context)
    elif query.data == 'view_schedule':
        await view_schedule(update, context)
    elif query.data == 'my_events':
        await my_events(update, context)
    elif query.data == 'past_events':
        await past_events(update, context)
    elif query.data == 'delete_event':
        await delete_event(update, context)
    elif query.data == 'reschedule_event':
        await reschedule_event(update, context)
    elif query.data == 'view_progress':
        await view_progress(update, context)
    elif query.data == 'level_up':
        await level_up(update, context)
    elif query.data == 'view_all_progress':
        await view_all_progress(update, context)
    elif query.data == 'notification_settings':
        await notification_settings(update, context)
    elif query.data == 'broadcast':
        await broadcast(update, context)
    elif query.data == 'manage_meeting_reminders':
        await manage_meeting_reminders(update, context)
    elif query.data == 'set_one_time_reminder':
        await set_one_time_reminder(update, context)
    elif query.data == 'set_recurring_reminder':
        await set_recurring_reminder(update, context)
    elif query.data == 'view_notifications':
        await view_notifications(update, context)
    elif query.data == 'delete_notification':
        await delete_notification(update, context)
    elif query.data == 'view_statistics':
        await view_statistics(update, context)
    elif query.data == 'show_level_codes':
        await show_level_codes(update, context)
    elif query.data == 'block_day':
        await block_day(update, context)
    elif query.data == 'enable_reminders':
        await enable_reminders(update, context)
    elif query.data == 'change_reminders':
        await change_reminders(update, context)
    elif query.data == 'disable_reminders':
        await disable_reminders(update, context)
    elif query.data == 'meeting_reminders':
        await set_meeting_reminder_time(update, context)
    elif query.data == 'user_reminders':
        await set_user_meeting_reminder_time(update, context)
    elif query.data == 'testing':
        await start_testing(query, context)
    elif query.data == 'manage_testing':
        await manage_testing(query, context)
    elif query.data == 'add_question':
        await add_question(query, context)
    elif query.data == 'edit_question':
        await edit_question(query, context)
    elif query.data == 'delete_question':
        await delete_question(query, context)
    elif query.data.startswith('answer_'):
        await handle_answer(update, context)
    elif query.data == 'cancel_test':
        context.user_data.clear()
        await query.edit_message_text("üö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üòâ")
        await menu(update, context)
    elif query.data.startswith('view_all_questions_'):
        page = int(query.data.split('_')[3])
        await view_all_questions(query, context, page)
    elif query.data == 'view_user_levels':
        await view_user_levels(query, context)
    elif query.data == 'change_user_level':
        await change_user_level(query, context)
    elif query.data == 'bulk_add_questions':
        await bulk_add_questions(query, context)
    elif query.data == 'menu':
        await start(update, context)

    # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    else:
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞: {query.data}")
        await start(update, context)
    
# –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞
async def admin_menu(update: Update, context: CallbackContext):
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –≤ —Å—Ç–µ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    if 'menu_stack' not in context.user_data:
        context.user_data['menu_stack'] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –µ—â–µ –Ω–µ –≤ —Å—Ç–µ–∫–µ
    if not context.user_data['menu_stack'] or context.user_data['menu_stack'][-1] != admin_menu:
        context.user_data['menu_stack'].append(admin_menu)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –º–µ–Ω—é 'admin_menu' –≤ —Å—Ç–µ–∫. –¢–µ–∫—É—â–∏–π —Å—Ç–µ–∫: {[func.__name__ for func in context.user_data['menu_stack']]}")

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not is_admin(user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    keyboard = [
        [InlineKeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data='notification_settings'), InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='manage_users')],
        [InlineKeyboardButton("üì© –†–∞—Å—Å—ã–ª–∫–∞", callback_data='broadcast'), InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='view_statistics')],
        [InlineKeyboardButton("üîë –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data='show_level_codes'), InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å", callback_data='block_day')],
        [InlineKeyboardButton("üéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º", callback_data='manage_testing')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞–∑–º–µ—Ç–∫–∞
    current_text = "üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞:"
    if query.message.text != current_text or query.message.reply_markup != reply_markup:
        await query.edit_message_text(text=current_text, reply_markup=reply_markup)
    else:
        logger.info("üîç –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. üòâ")

    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
async def show_level_codes(update: Update, context: CallbackContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∫–æ–¥–æ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –∏ —É—Ä–æ–≤–Ω—è–º–∏
    level_codes_text = "üîë –ö–æ–¥–æ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è:\n\n"
    for code, level in LEVEL_CODES.items():
        level_codes_text += f"üîπ {code} ‚Üí {level}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.edit_message_text(level_codes_text, reply_markup=reply_markup)

# –ó–∞–ø—Ä–æ—Å –ø–æ–º–æ—â–∏
async def request_help(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("üÜò –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å, –∏ —è –ø–æ–∑–æ–≤—É –º–µ–Ω—Ç–æ—Ä–æ–≤! \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∑–∞–¥–∞—á–µ–π –ø–æ SQL.")
    context.user_data['step'] = 'get_help_message'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    update_last_active(context)

async def handle_help_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    help_message = update.message.text
    user = update.effective_user

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in ADMINS:
            try:
                cursor.execute("SELECT id FROM users WHERE username = ?", (admin,))
                admin_id = cursor.fetchone()
                if admin_id:
                    await context.bot.send_message(
                        chat_id=admin_id[0],
                        text=f"üÜò –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å!\nüìù –¢–µ–º–∞: {help_message}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("üëå –•–æ—Ä–æ—à–æ! –Ø —É–∂–µ –∑–æ–≤—É –º–µ–Ω—Ç–æ—Ä–æ–≤. –û–Ω–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è —Å —Ç–æ–±–æ–π! ü§ù")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ (step) –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if 'step' in context.user_data:
            del context.user_data['step']

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await start(update, context)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help_message: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–º–æ—â—å. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def add_event(update: Update, context: CallbackContext):
    user = update.effective_user

    if is_admin(user.username):
        # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await update.callback_query.edit_message_text("üë§ –•–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏ –µ–≥–æ –∏–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–§–∞–º–∏–ª–∏—è –ò–º—è. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω.")
        context.user_data['step'] = 'get_user_full_name'
    else:
        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update.callback_query.edit_message_text("–•–æ—Ä–æ—à–æ! üìÜ –•–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É? –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†15.03.2025")
        context.user_data['step'] = 'get_event_date'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def handle_user_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    full_name = update.message.text
    context.user_data['user_full_name'] = full_name
    await update.message.reply_text("üë§–í–≤–µ–¥–∏—Ç–µ –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ç—ã –Ω–∞–∑–Ω–∞—á–∞–µ—à—å –≤—Å—Ç—Ä–µ—á—É, –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†@–ù–∏–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†@ivanov.")
    context.user_data['step'] = 'get_user_username'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

async def handle_user_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    username = update.message.text
    if not username.startswith('@'):
        await update.message.reply_text("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    context.user_data['user_username'] = username
    await update.message.reply_text("üìÜ –•–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É? –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†01.09.2025")
    context.user_data['step'] = 'get_event_date'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
async def handle_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    event_date = update.message.text
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        event_date_obj = datetime.strptime(event_date, '%d.%m.%Y')
        event_date_obj = MOSCOW_TZ.localize(event_date_obj)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        context.user_data['event_date'] = event_date_obj.strftime('%d.%m.%Y')
        await update.message.reply_text("‚è∞ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†19:00.")
        context.user_data['step'] = 'get_event_time'
        update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")

async def handle_event_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        event_time = update.message.text
        logger.info(f"–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {event_time}")  # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(event_time, '%H:%M')  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
            hour, minute = map(int, event_time.split(':'))  # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã
            logger.info(f"–í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–æ–±—Ä–∞–Ω–æ: —á–∞—Å={hour}, –º–∏–Ω—É—Ç–∞={minute}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            user = update.effective_user
            if not is_admin(user.username):
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 19:00-23:00
                if hour < 19 or hour > 23:
                    await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∏ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å 19:00 –¥–æ 23:00.")
                    return

                # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                if minute < 30:
                    event_time = f"{hour}:00"
                else:
                    event_time = f"{hour + 1}:00" if hour < 23 else "23:00"
                logger.info(f"–û–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {event_time}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            current_time = get_moscow_time()
            event_date = context.user_data['event_date']
            logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {event_date}")  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD
            try:
                event_date_obj = datetime.strptime(event_date, '%d.%m.%Y')
                event_date_formatted = event_date_obj.strftime('%Y-%m-%d')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ YYYY-MM-DD
                logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: {event_date_formatted}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
            except ValueError:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
                return

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç datetime
            event_datetime = datetime.strptime(f"{event_date_formatted} {event_time}", '%Y-%m-%d %H:%M')
            event_datetime = MOSCOW_TZ.localize(event_datetime)
            logger.info(f"–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {event_datetime}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –≤ –±—É–¥—É—â–µ–º
            if event_datetime <= current_time:
                await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
                return

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –Ω–æ –Ω–∞ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            if event_datetime.date() == current_time.date() and event_datetime.time() <= current_time.time():
                await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞ –±—É–¥—É—â–µ–µ –≤—Ä–µ–º—è.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–∏
            context.user_data['event_time'] = event_datetime.strftime('%H:%M')
            context.user_data['event_date'] = event_datetime.strftime('%Y-%m-%d')
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {context.user_data['event_time']}")  # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å–ª–æ—Ç–∞
            cursor.execute("SELECT * FROM schedule WHERE event_date = ? AND event_time = ?", 
                           (context.user_data['event_date'], context.user_data['event_time']))
            if cursor.fetchone():
                if is_admin(user.username):
                    await update.message.reply_text("‚ö†Ô∏è –ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —Å—Ç–æ–∏—Ç –≤—Å—Ç—Ä–µ—á–∞, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
                else:
                    await update.message.reply_text("‚ùå –ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∞. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è. –ù–∞–ø—Ä–∏–º–µ—Ä: 20:00.")
                    return

            await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä: –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞.")
            context.user_data['step'] = 'get_event_topic'
            update_last_active(context)
        except ValueError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–º—ã –≤—Å—Ç—Ä–µ—á–∏
async def handle_event_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    event_topic = update.message.text
    user = update.effective_user

    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        if is_admin(user.username):
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            full_name = context.user_data['user_full_name']
            username = context.user_data['user_username']

            # –ù–∞—Ö–æ–¥–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É
            cursor.execute("SELECT id FROM users WHERE username = ?", (username[1:],))  # –£–±–∏—Ä–∞–µ–º @
            user_id = cursor.fetchone()
            if not user_id:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            user_id = user_id[0]
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_id = user.id
            full_name = user.full_name
            username = user.username

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫–ª—é—á–∏ –≤ context.user_data
        if 'event_date' not in context.user_data or 'event_time' not in context.user_data:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        event_date = context.user_data['event_date']
        event_time = context.user_data['event_time']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO schedule (user_id, event_name, event_date, event_time) VALUES (?, ?, ?, ?)",
            (user_id, event_topic, event_date, event_time)
        )
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in ADMINS:
            try:
                cursor.execute("SELECT id FROM users WHERE username = ?", (admin,))
                admin_id = cursor.fetchone()
                if admin_id:
                    await context.bot.send_message(
                        chat_id=admin_id[0],
                        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–∞–∑–Ω–∞—á–∏–ª –≤—Å—Ç—Ä–µ—á—É {event_date} –Ω–∞ {event_time}!"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

        if is_admin(user.username):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{user.username} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–µ–±–µ –≤—Å—Ç—Ä–µ—á—É!\n–ù–∞: {event_date} {event_time}\n–ë—É–¥—å –≥–æ—Ç–æ–≤!"
            )

        # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!\n"
            f"‚è∞ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {event_date} {event_time}\n"
            f"–ñ–¥—ë–º —Ç–µ–±—è! üéâ"
        )
    except Exception as e:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤—Å—Ç—Ä–µ—á–∏: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

    await start(update, context)
    context.user_data.clear()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def view_schedule(update: Update, context: CallbackContext):
    conn = None
    try:
        user = update.effective_user
        current_time = get_moscow_time().strftime('%Y-%m-%d %H:%M')

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è
        if is_admin(user.username):
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –±—É–¥—É—â–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            cursor.execute("""
                SELECT event_date, event_time, event_name, full_name, username 
                FROM schedule 
                JOIN users ON schedule.user_id = users.id 
                WHERE datetime(event_date || ' ' || event_time) >= datetime(?)
                ORDER BY event_date, event_time ASC
            """, (current_time,))
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤—Å—Ç—Ä–µ—á–∏, –Ω–æ —Ç–æ–ª—å–∫–æ –µ–≥–æ –≤—Å—Ç—Ä–µ—á–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
            cursor.execute("""
                SELECT event_date, event_time, event_name, full_name, username 
                FROM schedule 
                JOIN users ON schedule.user_id = users.id 
                WHERE datetime(event_date || ' ' || event_time) >= datetime(?)
                ORDER BY event_date, event_time ASC
            """, (current_time,))

        events = cursor.fetchall()

        if not events:
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á.", reply_markup=reply_markup)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
        grouped_events = {}
        for event in events:
            event_date, event_time, event_name, full_name, username = event

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DD.MM.YYYY –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                event_date_obj = datetime.strptime(event_date, '%Y-%m-%d')
                event_date_formatted = event_date_obj.strftime('%d.%m.%Y')
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                event_date_formatted = event_date

            if event_date_formatted not in grouped_events:
                grouped_events[event_date_formatted] = []

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —ç—Ç–æ –µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if is_admin(user.username) or username == user.username:
                grouped_events[event_date_formatted].append((event_time, event_name, full_name, username))
            else:
                # –ò–Ω–∞—á–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "‚ùå –ó–∞–Ω—è—Ç–æ"
                grouped_events[event_date_formatted].append((event_time, "‚ùå –ó–∞–Ω—è—Ç–æ", None, None))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorted_dates = sorted(
            grouped_events.keys(),
            key=lambda x: datetime.strptime(x, "%d.%m.%Y")
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 5 –¥–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        page_size = 5
        total_pages = (len(sorted_dates) // page_size + (1 if len(sorted_dates) % page_size != 0 else 0))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        page = context.user_data.get('schedule_page', 1)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        page = max(1, min(page, total_pages))

        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = (page - 1) * page_size
        end_index = start_index + page_size
        dates_to_show = sorted_dates[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_text = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á:\n\n"
        for date in dates_to_show:
            schedule_text += f"üìÖ {date}\n"
            for event_time, event_name, full_name, username in grouped_events[date]:
                if full_name and username:
                    schedule_text += f"‚è∞ {event_time} üë§ {full_name} (@{username}) üìù {event_name}\n"
                else:
                    schedule_text += f"‚è∞ {event_time} ‚ùå –ó–∞–Ω—è—Ç–æ\n"
            schedule_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        schedule_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        if page > 1:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'schedule_page_{page - 1}')])
        if page < total_pages:
            keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'schedule_page_{page + 1}')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(schedule_text, reply_markup=reply_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['schedule_page'] = page
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_schedule: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –≤—Å—Ç—Ä–µ—á
async def my_events(update: Update, context: CallbackContext):
    user = update.effective_user
    current_time = get_moscow_time().strftime('%Y-%m-%d %H:%M')

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#        cursor.execute("""
#            SELECT event_date, event_time, event_name 
#            FROM schedule 
#            WHERE user_id = ? AND datetime(substr(event_date, 7, 4) || '-' || substr(event_date, 4, 2) || '-' || substr(event_date, 9, 2) || ' ' || event_time) >= datetime(?)
#            ORDER BY event_date, event_time
#        """, (user.id, current_time))
#        events = cursor.fetchall()
        
        cursor.execute("""
            SELECT event_date, event_time, event_name 
            FROM schedule 
            WHERE user_id = ? 
            AND datetime(event_date || ' ' || event_time) >= datetime(?)
            ORDER BY event_date, event_time
        """, (user.id, current_time))
        events = cursor.fetchall()

        logger.info(f"–ò—â–µ–º –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è user_id={user.id}, current_time={current_time}")
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –≤—Å—Ç—Ä–µ—á: {len(events)}")
        
        if not events:
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("üìÖ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. \nüòä –•–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é?", reply_markup=reply_markup)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤—Å—Ç—Ä–µ—á
        schedule_text = "‚è∞ –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏: ‚è∞\n\n"
        current_date = None

        for event in events:
            event_date, event_time, event_name = event
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
            event_date_formatted = datetime.strptime(event_date, '%Y-%m-%d').strftime('%d.%m.%Y')

            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–æ–≤–æ–π –¥–∞—Ç–æ–π
            if event_date_formatted != current_date:
                if current_date is not None:
                    schedule_text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É –±–ª–æ–∫–∞–º–∏ –¥–∞—Ç
                schedule_text += f"üìÖ {event_date_formatted}\n"
                current_date = event_date_formatted

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏ —Ç–µ–º—É –≤—Å—Ç—Ä–µ—á–∏
            schedule_text += f"‚è∞ {event_time} üìù {event_name}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(schedule_text, reply_markup=reply_markup)
        update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ my_events: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á
async def past_events(update: Update, context: CallbackContext):
    conn = None
    try:
        user = update.effective_user
        current_time = get_moscow_time().strftime('%Y-%m-%d %H:%M')

        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: id={user.id}, username={user.username}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
        if is_admin(user.username):
            # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            cursor.execute("""
                SELECT event_date, event_time, event_name, full_name, username 
                FROM schedule 
                JOIN users ON schedule.user_id = users.id 
                WHERE datetime(event_date || ' ' || event_time) < datetime(?)
                ORDER BY event_date DESC, event_time ASC
            """, (current_time,))
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ –ø—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏
            cursor.execute("""
                SELECT event_date, event_time, event_name, user_id 
                FROM schedule 
                WHERE datetime(event_date || ' ' || event_time) < datetime(?)
                ORDER BY event_date DESC, event_time ASC
            """, (current_time,))

        events = cursor.fetchall()

        if not events:
            # –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("üìÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á. \nüòâ –ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ!", reply_markup=reply_markup)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –¥–∞—Ç–∞–º
        grouped_events = {}
        for event in events:
            if is_admin(user.username):
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –≤—Å–µ 5 –∑–Ω–∞—á–µ–Ω–∏–π
                event_date, event_time, event_name, full_name, username = event
            else:
                # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 3 –∑–Ω–∞—á–µ–Ω–∏—è
                event_date, event_time, event_name, event_user_id = event
                full_name, username = None, None  # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DD.MM.YYYY –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                event_date_obj = datetime.strptime(event_date, '%Y-%m-%d')
                event_date_formatted = event_date_obj.strftime('%d.%m.%Y')
            except ValueError:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                event_date_formatted = event_date

            if event_date_formatted not in grouped_events:
                grouped_events[event_date_formatted] = []

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–ª–∏ —ç—Ç–æ –µ–≥–æ –≤—Å—Ç—Ä–µ—á–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            if is_admin(user.username) or (not is_admin(user.username) and event_user_id == user.id):
                grouped_events[event_date_formatted].append((event_time, event_name, full_name, username))
            else:
                grouped_events[event_date_formatted].append((event_time, "‚ùå –ó–∞–Ω—è—Ç–æ", None, None))

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç –≤ –æ–±—ä–µ–∫—Ç—ã datetime –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        sorted_dates = sorted(
            grouped_events.keys(),
            key=lambda x: datetime.strptime(x, "%d.%m.%Y"),
            reverse=True
        )

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ 5 –¥–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
        page_size = 5
        total_pages = (len(sorted_dates) // page_size + (1 if len(sorted_dates) % page_size != 0 else 0))

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
        page = context.user_data.get('past_events_page', 1)

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        page = max(1, min(page, total_pages))

        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        start_index = (page - 1) * page_size
        end_index = start_index + page_size
        dates_to_show = sorted_dates[start_index:end_index]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤—Å—Ç—Ä–µ—á
        schedule_text = "‚è∞ –ü—Ä–æ—à–µ–¥—à–∏–µ –≤—Å—Ç—Ä–µ—á–∏: ‚è∞\n\n"
        for date in dates_to_show:
            schedule_text += f"üìÖ {date}\n"
            for event in grouped_events[date]:
                if is_admin(user.username):
                    # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 4 –∑–Ω–∞—á–µ–Ω–∏—è
                    event_time, event_name, full_name, username = event
                    schedule_text += f"‚è∞ {event_time} üë§ {full_name} (@{username}) üìù {event_name}\n"
                else:
                    # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 2 –∑–Ω–∞—á–µ–Ω–∏—è
                    event_time, event_name, _, _ = event  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    schedule_text += f"‚è∞ {event_time} üìù {event_name}\n"
            schedule_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        schedule_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} –∏–∑ {total_pages}"

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = []
        if page > 1:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'past_events_page_{page - 1}')])
        if page < total_pages:
            keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f'past_events_page_{page + 1}')])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')])

        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(schedule_text, reply_markup=reply_markup)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['past_events_page'] = page
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ past_events: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
async def delete_event(update: Update, context: CallbackContext):
    user = update.effective_user
    meetings = await get_upcoming_meetings(user.id)
    
    if not meetings:
        await update.callback_query.edit_message_text("üìÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. üòä")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏
    meetings_text = "‚ùå –•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É? \n–¢–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    for i, (event_date, event_time, event_name) in enumerate(meetings, start=1):
        event_date_formatted = datetime.strptime(event_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        meetings_text += f"{i}. {event_date_formatted} {event_time} - {event_name}\n"
    
    meetings_text += "\n–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025 19:00."
    
    await update.callback_query.edit_message_text(meetings_text)
    context.user_data['step'] = 'get_event_to_delete'
    update_last_active(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
async def handle_delete_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    user = update.effective_user
    event_datetime = update.message.text

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            event_date, event_time = event_datetime.split()
            event_date = datetime.strptime(event_date, '%d.%m.%Y').strftime('%Y-%m-%d')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            event_time = datetime.strptime(event_time, '%H:%M').strftime('%H:%M')  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#            datetime.strptime(event_date, '%d.%m.%Y')
#            datetime.strptime(event_time, '%H:%M')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
        logger.info(f"–ò—â–µ–º –≤—Å—Ç—Ä–µ—á—É: event_date={event_date}, event_time={event_time}")

        cursor.execute("SELECT user_id FROM schedule WHERE event_date = ? AND event_time = ?", (event_date, event_time))
        event_user_id = cursor.fetchone()
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {event_user_id}")
        
        if not event_user_id:
            await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
            return

        if not is_admin(user.username) and event_user_id[0] != user.id:
            await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –≤—Å—Ç—Ä–µ—á–∞! –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =)")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª—è–µ—Ç –≤—Å—Ç—Ä–µ—á—É
        cursor.execute("SELECT full_name, username FROM users WHERE id = ?", (user.id,))
        user_info = cursor.fetchone()
        full_name, username = user_info if user_info else ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")

        # –£–¥–∞–ª—è–µ–º –≤—Å—Ç—Ä–µ—á—É
        cursor.execute("DELETE FROM schedule WHERE event_date = ? AND event_time = ?", (event_date, event_time))
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin in ADMINS:
            try:
                cursor.execute("SELECT id FROM users WHERE username = ?", (admin,))
                admin_id = cursor.fetchone()
                if admin_id:
                    await context.bot.send_message(
                        chat_id=admin_id[0],
                        text=f"üö® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} (@{username}) —É–¥–∞–ª–∏–ª –≤—Å—Ç—Ä–µ—á—É –Ω–∞ {event_date} –≤ {event_time}! üö®"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

        await update.message.reply_text("üóë –•–æ—Ä–æ—à–æ! –í—Å—Ç—Ä–µ—á–∞ —É–¥–∞–ª–µ–Ω–∞! \n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–æ–≤—É—é. üòâ")
        await start(update, context)
        context.user_data.clear()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_delete_event: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

async def get_upcoming_meetings(user_id):
    conn = get_db_connection()
    cursor = conn.cursor()
    current_time = get_moscow_time().strftime('%Y-%m-%d %H:%M')
    
    cursor.execute("""
        SELECT event_date, event_time, event_name 
        FROM schedule 
        WHERE user_id = ? AND datetime(event_date || ' ' || event_time) >= datetime(?)
        ORDER BY event_date, event_time
    """, (user_id, current_time))
    
    meetings = cursor.fetchall()
    conn.close()
    return meetings

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏
async def reschedule_event(update: Update, context: CallbackContext):
    user = update.effective_user
    meetings = await get_upcoming_meetings(user.id)
    
    if not meetings:
        await update.callback_query.edit_message_text("üìÖ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á. üòä")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–º–∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏
    meetings_text = "üîÑ –•–æ—á–µ—à—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É? \n–¢–≤–æ–∏ –≤—Å—Ç—Ä–µ—á–∏:\n"
    for i, (event_date, event_time, event_name) in enumerate(meetings, start=1):
        event_date_formatted = datetime.strptime(event_date, '%Y-%m-%d').strftime('%d.%m.%Y')
        meetings_text += f"{i}. {event_date_formatted} {event_time} - {event_name}\n"
    
    meetings_text += "\n–í–≤–µ–¥–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 15.09.2025 19:00."
    
    await update.callback_query.edit_message_text(meetings_text)
    context.user_data['step'] = 'get_event_to_reschedule'
    update_last_active(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤—Å—Ç—Ä–µ—á–∏
async def handle_reschedule_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    user = update.effective_user
    event_datetime = update.message.text

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            event_date, event_time = event_datetime.split()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD
            event_date_obj = datetime.strptime(event_date, '%d.%m.%Y')
            event_date_formatted = event_date_obj.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            event_time_obj = datetime.strptime(event_time, '%H:%M')
            event_time_formatted = event_time_obj.strftime('%H:%M')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HH:MM

            # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º
            logger.info(f"–ò—â–µ–º –≤—Å—Ç—Ä–µ—á—É: event_date={event_date_formatted}, event_time={event_time_formatted}")

            # –ò—â–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("SELECT user_id FROM schedule WHERE event_date = ? AND event_time = ?", 
                           (event_date_formatted, event_time_formatted))
            event_user_id = cursor.fetchone()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: {event_user_id}")
            
            if not event_user_id:
                await update.message.reply_text("‚ùå –í—Å—Ç—Ä–µ—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å—Ç—Ä–µ—á—É –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ (–∞–¥–º–∏–Ω –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –≤—Å—Ç—Ä–µ—á–∏)
            if not is_admin(user.username) and event_user_id['user_id'] != user.id:
                await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ —Ç–≤–æ—è –≤—Å—Ç—Ä–µ—á–∞! –ü—Ä–æ–≤–µ—Ä—å –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =)")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['old_event_date'] = event_date_formatted
            context.user_data['old_event_time'] = event_time_formatted

            await update.message.reply_text("üìÖ –í–≤–µ–¥–∏ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†16.09.2025 20:00.")
            context.user_data['step'] = 'get_new_datetime'
            update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reschedule_event: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
async def handle_new_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    user = update.effective_user
    new_datetime = update.message.text

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        try:
            # –†–∞–∑–¥–µ–ª—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            new_date, new_time = new_datetime.split()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD
            new_date_obj = datetime.strptime(new_date, '%d.%m.%Y')
            new_date_formatted = new_date_obj.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            new_time_obj = datetime.strptime(new_time, '%H:%M')
            new_time_formatted = new_time_obj.strftime('%H:%M')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ HH:MM

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            old_date = context.user_data['old_event_date']
            old_time = context.user_data['old_event_time']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –∑–∞–Ω—è—Ç—ã
            cursor.execute("SELECT * FROM schedule WHERE event_date = ? AND event_time = ?", 
                           (new_date_formatted, new_time_formatted))
            if cursor.fetchone():
                await update.message.reply_text("‚ùå –ù–∞ —ç—Ç–æ –≤—Ä–µ–º—è —É–∂–µ —Å—Ç–æ–∏—Ç –≤—Å—Ç—Ä–µ—á–∞. –í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å—Ç—Ä–µ—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("""
                UPDATE schedule
                SET event_date = ?, event_time = ?
                WHERE event_date = ? AND event_time = ?
            """, (new_date_formatted, new_time_formatted, old_date, old_time))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            for admin in ADMINS:
                try:
                    cursor.execute("SELECT id FROM users WHERE username = ?", (admin,))
                    admin_id = cursor.fetchone()
                    if admin_id:
                        await context.bot.send_message(
                            chat_id=admin_id[0],
                            text=f"üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} –ø–µ—Ä–µ–Ω—ë—Å –≤—Å—Ç—Ä–µ—á—É:\n–ë—ã–ª–æ:\nüìÖ –î–∞—Ç–∞: {old_date}\n‚è∞ –í—Ä–µ–º—è: {old_time}\n–°—Ç–∞–ª–æ:\nüìÖ –î–∞—Ç–∞: {new_date_formatted}\n‚è∞ –í—Ä–µ–º—è: {new_time_formatted}"
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin}: {e}")

            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            await update.message.reply_text(
                f"üîÑ –•–æ—Ä–æ—à–æ! –í—Å—Ç—Ä–µ—á–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞!\n"
                f"‚è∞ –ë—ã–ª–æ: {old_date} {old_time}\n"
                f"‚è∞ –°—Ç–∞–ª–æ: {new_date_formatted} {new_time_formatted}\n"
                f"–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –Ω–µ—ë! üïí"
            )
            await start(update, context)
            context.user_data.clear()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_datetime: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
async def view_progress(update: Update, context: CallbackContext):
    user = update.effective_user

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT level FROM users WHERE id = ?", (user.id,))
        current_level = cursor.fetchone()[0]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        cursor.execute("SELECT level, completed_at FROM progress WHERE user_id = ? ORDER BY completed_at", (user.id,))
        completed_levels = cursor.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ–±—É—á–µ–Ω–∏—è
        cursor.execute("SELECT joined_at FROM users WHERE id = ?", (user.id,))
        joined_at = cursor.fetchone()[0]
        if joined_at:
            days_learning = (datetime.now() - datetime.strptime(joined_at, '%Y-%m-%d')).days
        else:
            days_learning = 0  # –ï—Å–ª–∏ joined_at –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã–º–∏ 0

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text = f"üìà –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™\n\n"
        progress_text += "üéØ –¢—ã —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —Ç–∞–∫ –º–Ω–æ–≥–æ:\n"
        for level, completed_at in completed_levels:
            progress_text += f"{level} {completed_at}\n"
        progress_text += f"\nüìÖ –¢—ã —É–∂–µ —É—á–∏—à—å—Å—è {days_learning} –¥–Ω–µ–π! –≠—Ç–æ –∫—Ä—É—Ç–æ! üéâ"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(progress_text, reply_markup=reply_markup)
      
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_progress: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def level_up(update: Update, context: CallbackContext):
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üöÄ –•–æ—á–µ—à—å –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å? –í–≤–µ–¥–∏ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ –Ω–∏–∂–µ. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ë–∞–º–±—É–∫")
    context.user_data['step'] = 'get_level_code'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
async def handle_level_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        user = update.effective_user
        level_code = update.message.text.strip()

        # –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        logger.info(f"–ö–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ: {level_code}, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–¥—ã: {list(LEVEL_CODES.keys())}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ
        if level_code not in LEVEL_CODES:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä:¬†–°–æ—Å–∏—Å–æ–Ω.")
            return

        new_level = LEVEL_CODES[level_code]

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT level FROM users WHERE id = ?", (user.id,))
        current_level_result = cursor.fetchone()
        
        if not current_level_result:
            await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        current_level = current_level_result[0]
        logger.info(f"üìà –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–ª–µ–¥—É—é—â–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ LEVEL_ORDER
        current_index = LEVEL_ORDER.index(current_level)
        new_index = LEVEL_ORDER.index(new_level)

        if new_index != current_index + 1:
            await update.message.reply_text(f"üö´ –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {new_level}. –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏ —É—Ä–æ–≤–µ–Ω—å {LEVEL_ORDER[current_index + 1]}!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–µ–≥–æ —É–∂–µ –µ—Å—Ç—å
        if new_level == current_level:
            await update.message.reply_text(f"üòä –¢—ã —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ: {current_level}. –£—á–∏—Å—å –∏ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å
        current_level_index = list(LEVEL_CODES.values()).index(current_level)
        new_level_index = list(LEVEL_CODES.values()).index(new_level)
        logger.info(f"–ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: {current_level_index}, –∏–Ω–¥–µ–∫—Å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è: {new_level_index}")
        
        if new_level_index < current_level_index:
            await update.message.reply_text(f"üö´ –¢—ã —É–∂–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ: {current_level}. –ù–µ –Ω—É–∂–Ω–æ –ø–æ–Ω–∏–∂–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å, —É—á–∏—Å—å –∏ —Ä–∞—Å—Ç–∏ –≤–≤–µ—Ä—Ö!")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ–ª—É—á–µ–Ω —ç—Ç–æ—Ç —É—Ä–æ–≤–µ–Ω—å
        cursor.execute("SELECT level FROM progress WHERE user_id = ? AND level = ?", (user.id, new_level))
        if cursor.fetchone():
            await update.message.reply_text(f"üö´ –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —É—Ä–æ–≤–µ–Ω—å: {new_level}. –£—á–∏—Å—å –∏ —Ä–∞—Å—Ç–∏ –¥–∞–ª—å—à–µ!")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("UPDATE users SET level = ? WHERE id = ?", (new_level, user.id))
        cursor.execute("INSERT INTO progress (user_id, level, completed_at) VALUES (?, ?, ?)", (user.id, new_level, datetime.now().strftime('%Y-%m-%d')))
        conn.commit()
        logger.info(f"–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_level}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        reward = LEVEL_REWARDS.get(new_level, "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤—ã–º —É—Ä–æ–≤–Ω–µ–º! üéâ")
        await update.message.reply_text(
            f"ü•≥ü•≥ü•≥ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! ü•≥ü•≥ü•≥\n"
            f"–¢—ã –ø—Ä–æ–¥–≤–∏–Ω—É–ª—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å: {new_level}\n"
            f"{reward}"
        )

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
        context.user_data.clear()
        await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_level_code: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è.")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        context.user_data.pop('step', None)
        await start(update, context)
    finally:
        if conn:
            conn.close()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def view_all_progress(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT username, level, joined_at FROM users")
        users = cursor.fetchall()

        if not users:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=reply_markup)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text = "üë• –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for username, level, joined_at in users:
            cursor.execute("SELECT level, completed_at FROM progress WHERE user_id = (SELECT id FROM users WHERE username = ?) ORDER BY completed_at", (username,))
            completed_levels = cursor.fetchall()
            if joined_at:
                days_learning = (datetime.now() - datetime.strptime(joined_at, '%Y-%m-%d')).days
            else:
                days_learning = 0  # –ï—Å–ª–∏ joined_at –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Å—á–∏—Ç–∞–µ–º –¥–Ω–∏ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–≤–Ω—ã–º–∏ 0

            progress_text += f"@{username} –Ω–∞ —É—Ä–æ–≤–Ω–µ: {level}\n"
            progress_text += "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
            for lvl, completed_at in completed_levels:
                progress_text += f"{lvl} {completed_at}\n"
            progress_text += f"–£—á–∏—Ç—Å—è {days_learning} –¥–Ω–µ–π\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(progress_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_all_progress: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

async def broadcast(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("üì© –•–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ? –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∏–∂–µ (–º–æ–∂–Ω–æ —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏). \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞—é –æ –≤—Å—Ç—Ä–µ—á–µ,¬†—Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã,¬†–∑–∞–≤—Ç—Ä–∞ –≤ 19:00.")
    context.user_data['step'] = 'get_broadcast_message'
    update_last_active(context)

async def handle_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['broadcast_message'] = update.message.text

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if update.message.photo:
            context.user_data['broadcast_attachment'] = {
                'type': 'photo',
                'file_id': update.message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            }
        elif update.message.video:
            context.user_data['broadcast_attachment'] = {
                'type': 'video',
                'file_id': update.message.video.file_id
            }
        elif update.message.document:
            context.user_data['broadcast_attachment'] = {
                'type': 'document',
                'file_id': update.message.document.file_id
            }
        else:
            context.user_data['broadcast_attachment'] = None

        await update.message.reply_text("üë• –ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ? \n–í–≤–µ–¥–∏:¬†–í—Å–µ–º,¬†–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,¬†–°—Ç—É–¥–µ–Ω—Ç,¬†–í—ã–ø—É—Å–∫–Ω–∏–∫,¬†–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è,¬†–û—Ç–∫–∞–∑–Ω–∏–∫.")
        context.user_data['step'] = 'get_broadcast_recipients'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_broadcast_message: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_broadcast_recipients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
        return

    recipients = update.message.text.lower()
    valid_recipients = ["–≤—Å–µ–º", "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—É–¥–µ–Ω—Ç", "–≤—ã–ø—É—Å–∫–Ω–∏–∫", "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è", "–æ—Ç–∫–∞–∑–Ω–∏–∫"]
    if recipients not in valid_recipients:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏: –í—Å–µ–º, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –°—Ç—É–¥–µ–Ω—Ç, –í—ã–ø—É—Å–∫–Ω–∏–∫, –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è, –û—Ç–∫–∞–∑–Ω–∏–∫.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á –≤ context.user_data
    if 'broadcast_message' not in context.user_data:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    context.user_data['recipients'] = recipients
    await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—å, –≤—Å—ë –ª–∏ –≤–µ—Ä–Ω–æ. \n–ï—Å–ª–∏ –¥–∞, –≤–≤–µ–¥–∏:¬†–î–∞. \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å, –≤–≤–µ–¥–∏:¬†–ò–∑–º–µ–Ω–∏—Ç—å. \n–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª(–∞), –≤–≤–µ–¥–∏:¬†–°—Ç–æ–ø.")
    context.user_data['step'] = 'confirm_broadcast'
    update_last_active(context)

async def handle_broadcast_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.lower()
    if confirmation in ['1', '–¥–∞']:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –∫–ª—é—á–∏ –≤ context.user_data
        if 'broadcast_message' not in context.user_data or 'recipients' not in context.user_data:
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        message = context.user_data['broadcast_message']
        recipients = context.user_data['recipients']
        attachment = context.user_data.get('broadcast_attachment')

        conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            conn = get_db_connection()
            cursor = conn.cursor()

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
            if recipients == '–≤—Å–µ–º':
                cursor.execute("SELECT id FROM users")
            else:
                cursor.execute("SELECT id FROM users WHERE status = ?", (recipients.capitalize(),))

            users = cursor.fetchall()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            for user in users:
                try:
                    if attachment:
                        if attachment['type'] == 'photo':
                            await context.bot.send_photo(chat_id=user[0], photo=attachment['file_id'], caption=message)
                        elif attachment['type'] == 'video':
                            await context.bot.send_video(chat_id=user[0], video=attachment['file_id'], caption=message)
                        elif attachment['type'] == 'document':
                            await context.bot.send_document(chat_id=user[0], document=attachment['file_id'], caption=message)
                    else:
                        await context.bot.send_message(chat_id=user[0], text=message)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user[0]}: {e}")

            await update.message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –≤ –∫—É—Ä—Å–µ! üéâ")
            await start(update, context)
            context.user_data.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_broadcast_confirmation: {e}", exc_info=True)
        finally:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if conn:
                conn.close()

    elif confirmation in ['2', '–∏–∑–º–µ–Ω–∏—Ç—å']:
        await update.message.reply_text("üì© –í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        context.user_data['step'] = 'get_broadcast_message'
    elif confirmation in ['3', '—Å—Ç–æ–ø']:
        await update.message.reply_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –∑–∞–Ω–æ–≤–æ. üòâ")
        await start(update, context)
        context.user_data.clear()
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏: –î–∞/–ò–∑–º–µ–Ω–∏—Ç—å/–°—Ç–æ–ø")

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
async def manage_meeting_reminders(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("–ó–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö? –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    context.user_data['step'] = 'get_reminder_time'
    update_last_active(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def handle_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_time = update.message.text
        try:
            hours, minutes = map(int, reminder_time.split(':'))
            reminder_minutes = hours * 60 + minutes
            context.user_data['reminder_time'] = reminder_minutes

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            user_tz = MOSCOW_TZ

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            user = update.effective_user
            cursor.execute(
                "INSERT OR REPLACE INTO reminders (user_id, reminder_type, reminder_time, reminder_text) VALUES (?, ?, ?, ?)",
                (user.id, 'meeting_reminder', reminder_minutes, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤—Å—Ç—Ä–µ—á–∞—Ö")
            )
            conn.commit()
            
            logger.info(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.id}.")
            
            # –í –ª—é–±–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≥–¥–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            cursor.execute("SELECT * FROM reminders")
            reminders = cursor.fetchall()
            logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã reminders: {reminders}")
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if 'meeting_reminder_job' in context.user_data:
                context.user_data['meeting_reminder_job'].schedule_removal()
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            context.user_data['meeting_reminder_job'] = context.job_queue.run_repeating(
                send_meeting_reminders,
                interval=60.0,  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                first=0.0,
                data={"user_id": user.id, "minutes": reminder_minutes, "timezone": user_tz}
            )
            
            logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π {user.id}.")
            
            await update.message.reply_text(f"–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {reminder_time} –¥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á!")
            await start(update, context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_reminder_time: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def notification_settings(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    keyboard = [
        [InlineKeyboardButton("‚òùÔ∏è –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='set_one_time_reminder'), InlineKeyboardButton("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö", callback_data='meeting_reminders')],
        [InlineKeyboardButton("üñê –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data='set_recurring_reminder'), InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", callback_data='delete_notification')],
        [InlineKeyboardButton("üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='view_notifications')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    query = update.callback_query
    await query.edit_message_text(text="üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", reply_markup=reply_markup)
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

async def send_meeting_reminders(context: CallbackContext):
    conn = None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        now = get_moscow_time()
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (MSK): {now}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT r.user_id, r.reminder_type, r.reminder_time, r.reminder_text, 
                   r.meeting_reminder_minutes, r.user_meeting_reminder_minutes
            FROM reminders r
        """)
        reminders = cursor.fetchall()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: reminders={reminders}")

        if not reminders:
            logger.info("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        for user_id, reminder_type, reminder_time, reminder_text, meeting_reminder_minutes, user_meeting_reminder_minutes in reminders:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: user_id={user_id}, reminder_type={reminder_type}")

            if reminder_type == 'user_meeting_reminder':
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if user_meeting_reminder_minutes:
                    reminder_time = now + timedelta(minutes=user_meeting_reminder_minutes)
                    cursor.execute("""
                        SELECT s.event_date, s.event_time, s.event_name, u.full_name, u.username
                        FROM schedule s
                        JOIN users u ON s.user_id = u.id
                        WHERE s.user_id = ? AND datetime(s.event_date || ' ' || s.event_time) BETWEEN datetime(?) AND datetime(?)
                        AND s.is_blocked_day = FALSE  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å —Ñ–ª–∞–≥–æ–º is_blocked_day
                    """, (user_id, now.strftime('%Y-%m-%d %H:%M'), reminder_time.strftime('%Y-%m-%d %H:%M')))
                    meetings = cursor.fetchall()

                    if meetings:
                        for event_date, event_time, event_name, full_name, username in meetings:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏
                            cursor.execute("""
                                SELECT id FROM sent_reminders 
                                WHERE user_id = ? AND event_date = ? AND event_time = ?
                            """, (user_id, event_date, event_time))
                            if cursor.fetchone():
                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {event_date} {event_time} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                continue

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            reminder_text = (
                                f"‚è∞ –Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —á–µ—Ä–µ–∑ {user_meeting_reminder_minutes} –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞!\n"
                                f"üìÖ –î–∞—Ç–∞: {event_date}\n"
                                f"‚è∞ –í—Ä–µ–º—è: {event_time}\n"
                                f"üìù –¢–µ–º–∞: {event_name}\n"
                                f"–ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è, –ø–æ–¥–∫–ª—é—á–∞–π—Å—è —Å –ü–ö, —Å –≤–µ–±–∫–∞–º–µ—Ä–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! –ò –Ω–µ –∑–∞–±—É–¥—å –≤–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å! üòä"
                            )
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=reminder_text
                            )
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                            cursor.execute("""
                                INSERT INTO sent_reminders (user_id, event_date, event_time)
                                VALUES (?, ?, ?)
                            """, (user_id, event_date, event_time))
                            conn.commit()

            elif reminder_type == 'meeting_reminder':
                # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if meeting_reminder_minutes:
                    reminder_time = now + timedelta(minutes=meeting_reminder_minutes)
                    cursor.execute("""
                        SELECT s.event_date, s.event_time, s.event_name, u.full_name, u.username
                        FROM schedule s
                        JOIN users u ON s.user_id = u.id
                        WHERE datetime(s.event_date || ' ' || s.event_time) BETWEEN datetime(?) AND datetime(?)
                        AND s.is_blocked_day = FALSE  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—Ç—Ä–µ—á–∏ —Å —Ñ–ª–∞–≥–æ–º is_blocked_day
                    """, (now.strftime('%Y-%m-%d %H:%M'), reminder_time.strftime('%Y-%m-%d %H:%M')))
                    meetings = cursor.fetchall()

                    if meetings:
                        for event_date, event_time, event_name, full_name, username in meetings:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≤—Å—Ç—Ä–µ—á–∏
                            cursor.execute("""
                                SELECT id FROM sent_reminders 
                                WHERE user_id = ? AND event_date = ? AND event_time = ?
                            """, (user_id, event_date, event_time))
                            if cursor.fetchone():
                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏ {event_date} {event_time} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {user_id}")
                                continue

                            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            reminder_text = (
                                f"‚è∞ –Ø –Ω–∞–ø–æ–º–∏–Ω–∞—é, —á—Ç–æ —á–µ—Ä–µ–∑ {meeting_reminder_minutes} –º–∏–Ω—É—Ç —Å {full_name} (@{username}) –±—É–¥–µ—Ç –≤—Å—Ç—Ä–µ—á–∞!\n"
                                f"üìÖ –î–∞—Ç–∞: {event_date}\n"
                                f"‚è∞ –í—Ä–µ–º—è: {event_time}\n"
                                f"üìù –¢–µ–º–∞: {event_name}\n"
                                f"–ü–æ–¥–≥–æ—Ç–æ–≤—å—Å—è, –ø–æ–¥–∫–ª—é—á–∞–π—Å—è —Å –ü–ö, —Å –≤–µ–±–∫–∞–º–µ—Ä–æ–π –∏ —Ö–æ—Ä–æ—à–∏–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º! –ò –Ω–µ –∑–∞–±—É–¥—å —Å–∫–∞–∑–∞—Ç—å '–ü—Ä–∏–≤–µ—Ç—ã, —É—á–µ–Ω–∏–∫–∏!' üòä"
                            )
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=reminder_text
                            )
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏
                            cursor.execute("""
                                INSERT INTO sent_reminders (user_id, event_date, event_time)
                                VALUES (?, ?, ?)
                            """, (user_id, event_date, event_time))
                            conn.commit()

            elif reminder_type == 'one_time':
                # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_datetime = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M')
                reminder_datetime = MOSCOW_TZ.localize(reminder_datetime)

                if now >= reminder_datetime:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}"
                    )
                    cursor.execute("DELETE FROM reminders WHERE user_id = ? AND reminder_time = ?", (user_id, reminder_time))
                    conn.commit()

            elif reminder_type in ['weekdays', 'daily']:
                # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                reminder_time_obj = datetime.strptime(reminder_time, '%H:%M').time()
                current_time_minutes = now.time().hour * 60 + now.time().minute
                reminder_time_minutes = reminder_time_obj.hour * 60 + reminder_time_obj.minute
                time_diff = abs(current_time_minutes - reminder_time_minutes)

                if time_diff == 0:
                    cursor.execute("""
                        SELECT last_sent_date FROM reminders
                        WHERE user_id = ? AND reminder_time = ? AND reminder_type = ?
                    """, (user_id, reminder_time, reminder_type))
                    last_sent_date = cursor.fetchone()

                    if not last_sent_date or last_sent_date[0] != now.date():
                        if reminder_type == 'weekdays' and now.weekday() < 5:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}"
                            )
                        elif reminder_type == 'daily':
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}"
                            )

                        cursor.execute("""
                            UPDATE reminders
                            SET last_sent_date = ?
                            WHERE user_id = ? AND reminder_time = ? AND reminder_type = ?
                        """, (now.date(), user_id, reminder_time, reminder_type))
                        conn.commit()

            elif reminder_type == 'test_result':
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–æ–≤
                cursor.execute("""
                    SELECT u.full_name, u.username, t.result, t.statistics
                    FROM test_results t
                    JOIN users u ON t.user_id = u.id
                    WHERE t.notified = FALSE
                """)
                test_results = cursor.fetchall()

                for full_name, username, result, statistics in test_results:
                    message = (
                        f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {full_name} (@{username})\n"
                        f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n"
                        f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n{statistics}"
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
                    for admin in ADMINS:
                        cursor.execute("SELECT id FROM users WHERE username = ?", (admin,))
                        admin_id = cursor.fetchone()
                        if admin_id:
                            await context.bot.send_message(
                                chat_id=admin_id[0],
                                text=message
                            )

                    # –ü–æ–º–µ—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                    cursor.execute("""
                        UPDATE test_results
                        SET notified = TRUE
                        WHERE user_id = (SELECT id FROM users WHERE username = ?)
                    """, (username,))
                    conn.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def set_one_time_reminder(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("üìÖ –•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? \n–í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†15.09.2025 19:00.")
    context.user_data['step'] = 'get_one_time_reminder_datetime'
    update_last_active(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_one_time_reminder_datetime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_datetime = update.message.text
        try:
            reminder_date, reminder_time = reminder_datetime.split()
            datetime.strptime(reminder_date, '%d.%m.%Y')
            datetime.strptime(reminder_time, '%H:%M')
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD HH:MM
            reminder_datetime_obj = datetime.strptime(f"{reminder_date} {reminder_time}", '%d.%m.%Y %H:%M')
            reminder_datetime_obj = MOSCOW_TZ.localize(reminder_datetime_obj)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
            reminder_datetime_str = reminder_datetime_obj.strftime('%Y-%m-%d %H:%M')
            
            context.user_data['reminder_datetime'] = reminder_datetime_str
            await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É!")
            context.user_data['step'] = 'get_one_time_reminder_text'
            update_last_active(context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_one_time_reminder_datetime: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_one_time_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_text = update.message.text
        reminder_datetime_str = context.user_data['reminder_datetime']
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ–±—ä–µ–∫—Ç datetime
        reminder_datetime_obj = datetime.strptime(reminder_datetime_str, '%Y-%m-%d %H:%M')
        reminder_datetime_obj = MOSCOW_TZ.localize(reminder_datetime_obj)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO reminders (user_id, reminder_type, reminder_time, reminder_text) VALUES (?, ?, ?, ?)",
            (update.effective_user.id, 'one_time', reminder_datetime_str, reminder_text)
        )
        conn.commit()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        context.job_queue.run_once(
            send_one_time_reminder,
            when=reminder_datetime_obj,
            data={"user_id": update.effective_user.id, "reminder_text": reminder_text}
        )

        await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! \nüòä –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ–± —ç—Ç–æ–º!")
        await start(update, context)
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_one_time_reminder_text: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_one_time_reminder_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.lower()
    if confirmation in ['1', '–¥–∞']:
        user = update.effective_user
        reminder_date = context.user_data['reminder_date']
        reminder_time = context.user_data['reminder_time']
        reminder_text = context.user_data['reminder_text']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO reminders (user_id, reminder_type, reminder_time, reminder_text) VALUES (?, ?, ?, ?)",
            (user.id, 'one_time', f"{reminder_date} {reminder_time}", reminder_text)
        )
        conn.commit()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        reminder_datetime = datetime.strptime(f"{reminder_date} {reminder_time}", '%d.%m.%Y %H:%M')
        reminder_datetime = MOSCOW_TZ.localize(reminder_datetime)
        context.job_queue.run_once(
            send_one_time_reminder,
            reminder_datetime,
            data={"user_id": user.id, "reminder_text": reminder_text}
        )

        await update.message.reply_text("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! \nüòä –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ –æ–± —ç—Ç–æ–º!")
        await start(update, context)
        context.user_data.clear()
    elif confirmation in ['2', '–∏–∑–º–µ–Ω–∏—Ç—å']:
        await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä:¬†–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É!")
        context.user_data['step'] = 'get_one_time_reminder_text'
    elif confirmation in ['3', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await start(update, context)
        context.user_data.clear()
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1) –î–∞, 2) –ò–∑–º–µ–Ω–∏—Ç—å, 3) –û—Ç–º–µ–Ω–∏—Ç—å.")

async def send_one_time_reminder(context: CallbackContext):
    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        now = get_moscow_time()
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (MSK): {now}")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT r.user_id, r.reminder_time, r.reminder_text, u.full_name, u.username
            FROM reminders r
            JOIN users u ON r.user_id = u.id
            WHERE r.reminder_type = 'one_time'
        """)
        reminders = cursor.fetchall()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminders)}")

        if not reminders:
            logger.info("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        for user_id, reminder_time, reminder_text, full_name, username in reminders:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç datetime
            reminder_datetime = datetime.strptime(reminder_time, '%Y-%m-%d %H:%M')
            reminder_datetime = MOSCOW_TZ.localize(reminder_datetime)
            logger.info(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminder_datetime}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if now >= reminder_datetime:
                logger.info("–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—É–ø–∏–ª–æ")
                await context.bot.send_message(
                    chat_id=user_id,
                    text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}\n"
                         f"üïí –í—Ä–µ–º—è: {now.strftime('%d.%m.%Y %H:%M')} (MSK)"
                )
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user_id})")

                # –£–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                cursor.execute("DELETE FROM reminders WHERE user_id = ? AND reminder_time = ?", (user_id, reminder_time))
                conn.commit()
                logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_one_time_reminder: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def set_recurring_reminder(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("‚è∞ –•–æ—á–µ—à—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†19:00.")
    context.user_data['step'] = 'get_recurring_reminder_time'
    update_last_active(context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_reminder_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_time = update.message.text
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
            datetime.strptime(reminder_time, '%H:%M')  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
            context.user_data['reminder_time'] = reminder_time
            await update.message.reply_text("üìÖ –ü–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ –±—É–¥–Ω—è–º (–≤–≤–µ–¥–∏¬†1) –∏–ª–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å (–≤–≤–µ–¥–∏¬†2)?")
            context.user_data['step'] = 'get_recurring_reminder_type'
            update_last_active(context)
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_recurring_reminder_time: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_reminder_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_type = update.message.text
        if reminder_type not in ['1', '2']:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1 –∏–ª–∏ 2")
            return

        context.user_data['reminder_type'] = 'weekdays' if reminder_type == '1' else 'daily'
        await update.message.reply_text("–û —á—ë–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
        context.user_data['step'] = 'get_recurring_reminder_text'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_recurring_reminder_type: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_reminder_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_text = update.message.text
        reminder_time = context.user_data.get('reminder_time')
        reminder_type = context.user_data.get('reminder_type')

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: reminder_time={reminder_time}, reminder_type={reminder_type}, reminder_text={reminder_text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
        if None in (reminder_time, reminder_type):
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            reminder_time_obj = datetime.strptime(reminder_time, '%H:%M').time()
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO reminders (user_id, reminder_type, reminder_time, reminder_text, last_sent_date) VALUES (?, ?, ?, ?, ?)",
            (update.effective_user.id, reminder_type, reminder_time, reminder_text, None)
        )
        conn.commit()

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: user_id={update.effective_user.id}, reminder_type={reminder_type}, reminder_time={reminder_time}, reminder_text={reminder_text}")

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_type == 'weekdays':
            context.job_queue.run_daily(
                send_recurring_reminder,
                time=reminder_time_obj,
                days=(0, 1, 2, 3, 4),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
                name=f"recurring_reminder_{update.effective_user.id}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            )
        elif reminder_type == 'daily':
            context.job_queue.run_daily(
                send_recurring_reminder,
                time=reminder_time_obj,
                name=f"recurring_reminder_{update.effective_user.id}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
            )

        await update.message.reply_text("üîî –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–æ –±—É–¥–Ω—è–º/–∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üïí")
        await start(update, context)
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_recurring_reminder_text: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_reminder_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    confirmation = update.message.text.lower()
    if confirmation in ['1', '–¥–∞']:
        user = update.effective_user
        reminder_time = context.user_data['reminder_time']
        reminder_type = context.user_data['reminder_type']
        reminder_text = context.user_data['reminder_text']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute(
            "INSERT INTO reminders (user_id, reminder_type, reminder_time, reminder_text, last_sent_date) VALUES (?, ?, ?, ?, ?)",
            (user.id, reminder_type, reminder_time, reminder_text, None)
        )
        conn.commit()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if reminder_type == 'weekdays':
            context.job_queue.run_daily(
                send_recurring_reminder,
                time=datetime.strptime(reminder_time, '%H:%M').time(),
                days=(0, 1, 2, 3, 4),  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
                data={"user_id": user.id, "reminder_text": reminder_text}
            )
        elif reminder_type == 'daily':
            context.job_queue.run_daily(
                send_recurring_reminder,
                time=datetime.strptime(reminder_time, '%H:%M').time(),
                data={"user_id": user.id, "reminder_text": reminder_text}
            )

        await update.message.reply_text("üîî –ü–æ–≤—Ç–æ—Ä—è—é—â–µ–µ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –ø–æ –±—É–¥–Ω—è–º/–∫–∞–∂–¥—ã–π –¥–µ–Ω—å! üïí")
        await start(update, context)
        context.user_data.clear()
    elif confirmation in ['2', '–∏–∑–º–µ–Ω–∏—Ç—å']:
        await update.message.reply_text("–û —á—ë–º —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å? –ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:")
        context.user_data['step'] = 'get_recurring_reminder_text'
    elif confirmation in ['3', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
        await update.message.reply_text("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await start(update, context)
        context.user_data.clear()
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1) –î–∞, 2) –ò–∑–º–µ–Ω–∏—Ç—å, 3) –û—Ç–º–µ–Ω–∏—Ç—å.")

async def send_recurring_reminder(context: CallbackContext):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        now = get_moscow_time()
        logger.info(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (MSK): {now}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            SELECT r.user_id, r.reminder_time, r.reminder_text, r.reminder_type, r.last_sent_date
            FROM reminders r
            WHERE r.reminder_type IN ('weekdays', 'daily')
        """)
        reminders = cursor.fetchall()
        logger.info(f"–î–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: reminders={reminders}")

        if not reminders:
            logger.info("–ù–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        for user_id, reminder_time, reminder_text, reminder_type, last_sent_date in reminders:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: user_id={user_id}, reminder_time={reminder_time}, reminder_text={reminder_text}, reminder_type={reminder_type}")

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏
            reminder_time_obj = datetime.strptime(reminder_time, '%H:%M').time()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –º–∏–Ω—É—Ç—É
            current_time_minutes = now.time().hour * 60 + now.time().minute
            reminder_time_minutes = reminder_time_obj.hour * 60 + reminder_time_obj.minute
            time_diff = abs(current_time_minutes - reminder_time_minutes)

            if time_diff == 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
                if last_sent_date != now.date():
                    # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ –±—É–¥–Ω—è–º, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–Ω–∏–π –¥–µ–Ω—å
                    if reminder_type == 'weekdays' and now.weekday() < 5:  # 0-4 = –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫-–ü—è—Ç–Ω–∏—Ü–∞
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        cursor.execute("""
                            UPDATE reminders
                            SET last_sent_date = ?
                            WHERE user_id = ? AND reminder_time = ? AND reminder_type = ?
                        """, (now.date(), user_id, reminder_time, reminder_type))
                        conn.commit()
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")

                    # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω—è
                    elif reminder_type == 'daily':
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞—é: {reminder_text}"
                        )
                        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                        cursor.execute("""
                            UPDATE reminders
                            SET last_sent_date = ?
                            WHERE user_id = ? AND reminder_time = ? AND reminder_type = ?
                        """, (now.date(), user_id, reminder_time, reminder_type))
                        conn.commit()
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
    finally:
        if conn:
            conn.close()

# –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async def view_notifications(update: Update, context: CallbackContext):
    user = update.effective_user

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("""
            SELECT r.reminder_type, r.reminder_time, r.reminder_text, u.full_name, u.username
            FROM reminders r
            JOIN users u ON r.user_id = u.id
            WHERE r.user_id = ?
        """, (user.id,))
        reminders = cursor.fetchall()

        if not reminders:
            # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='notification_settings')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("üìã –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. \nüòä –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ?", reply_markup=reply_markup)
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º
        one_time_reminders = {}
        weekday_reminders = []
        daily_reminders = []

        for reminder in reminders:
            reminder_type, reminder_time, reminder_text, full_name, username = reminder

            if reminder_type == 'one_time':
                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                date, time = reminder_time.split()
                if date not in one_time_reminders:
                    one_time_reminders[date] = []
                one_time_reminders[date].append((time, full_name, username, reminder_text))
            elif reminder_type == 'weekdays':
                weekday_reminders.append((reminder_time, full_name, username, reminder_text))
            elif reminder_type == 'daily':
                daily_reminders.append((reminder_time, full_name, username, reminder_text))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        notifications_text = "üîî –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n\n"

        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if one_time_reminders:
            notifications_text += "–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–µ:\n"
            for date, reminders_list in one_time_reminders.items():
                notifications_text += f"{date}\n"
                for time, full_name, username, text in reminders_list:
                    notifications_text += f"{time} {full_name} (@{username}) {text}\n"
                notifications_text += "\n"

        # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if weekday_reminders or daily_reminders:
            notifications_text += "–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:\n"

            if weekday_reminders:
                notifications_text += "–ü–æ –±—É–¥–Ω—è–º:\n"
                for time, full_name, username, text in weekday_reminders:
                    notifications_text += f"{time} {full_name} (@{username}) {text}\n"
                notifications_text += "\n"

            if daily_reminders:
                notifications_text += "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ:\n"
                for time, full_name, username, text in daily_reminders:
                    notifications_text += f"{time} {full_name} (@{username}) {text}\n"
                notifications_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='notification_settings')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(notifications_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_notifications: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
async def delete_notification(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("üóë –•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ? \n–í–≤–µ–¥–∏¬†1¬†- –¥–ª—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∏–ª–∏¬†2¬†- –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è.")
    context.user_data['step'] = 'get_notification_type_to_delete'
    update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
async def handle_notification_type_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        notification_type = update.message.text
        if notification_type not in ['1', '2']:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1 –∏–ª–∏ 2")
            return

        context.user_data['notification_type'] = 'one_time' if notification_type == '1' else 'recurring'
        if notification_type == '1':
            await update.message.reply_text("üìÖ –ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å? –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†15.09.2025 19:00.")
            context.user_data['step'] = 'get_one_time_notification_to_delete'
        else:
            await update.message.reply_text("üìÖ –ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å? –í–≤–µ–¥–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†15.09.2025 19:00.")
            context.user_data['step'] = 'get_recurring_notification_type_to_delete'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_notification_type_to_delete: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_one_time_notification_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_datetime = update.message.text
        try:
            reminder_date, reminder_time = reminder_datetime.split()
            datetime.strptime(reminder_date, '%d.%m.%Y')
            datetime.strptime(reminder_time, '%H:%M')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
            return

        user = update.effective_user
        cursor.execute("DELETE FROM reminders WHERE user_id = ? AND reminder_type = 'one_time' AND reminder_time = ?", (user.id, f"{reminder_date} {reminder_time}"))
        conn.commit()

        await update.message.reply_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ! \nüòâ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ.")
        await start(update, context)
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_one_time_notification_to_delete: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_notification_type_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_type = update.message.text
        if reminder_type not in ['1', '2']:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1 –∏–ª–∏ 2")
            return

        context.user_data['reminder_type'] = 'weekdays' if reminder_type == '1' else 'daily'
        await update.message.reply_text("üìÖ –ö–∞–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å? –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–ß–ß:–ú–ú. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†19:00.")
        context.user_data['step'] = 'get_recurring_notification_to_delete'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_recurring_notification_type_to_delete: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def handle_recurring_notification_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reminder_time = update.message.text
        try:
            datetime.strptime(reminder_time, '%H:%M')
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
            return

        user = update.effective_user
        reminder_type = context.user_data['reminder_type']
        cursor.execute("DELETE FROM reminders WHERE user_id = ? AND reminder_type = ? AND reminder_time = ?", (user.id, reminder_type, reminder_time))
        conn.commit()

        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'recurring_reminder_job' in context.user_data:
            context.user_data['recurring_reminder_job'].schedule_removal()

        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        await start(update, context)
        context.user_data.clear()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_recurring_notification_to_delete: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()
    
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async def view_statistics(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        cursor.execute("""
            SELECT full_name, username, joined_at, 
                   (SELECT COUNT(*) FROM schedule WHERE user_id = users.id) AS meetings_count
            FROM users
        """)
        users = cursor.fetchall()

        if not users:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.callback_query.edit_message_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.", reply_markup=reply_markup)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        statistics_text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n\n"
        for full_name, username, joined_at, meetings_count in users:
            if joined_at:
                days_learning = (datetime.now() - datetime.strptime(joined_at, '%Y-%m-%d')).days
            else:
                days_learning = 0
            statistics_text += f"{full_name} (@{username}) –æ–±—É—á–∞–µ—Ç—Å—è {days_learning} –¥–Ω–µ–π, –≤—Å—Ç—Ä–µ—á: {meetings_count}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.callback_query.edit_message_text(statistics_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ view_statistics: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

async def block_day(update: Update, context: CallbackContext):
    logger.info("–§—É–Ω–∫—Ü–∏—è block_day –≤—ã–∑–≤–∞–Ω–∞")
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("üìÖ –¢—ã —Ö–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å? –í–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†–î–î.–ú–ú.–ì–ì–ì–ì. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†15.09.2025")
    context.user_data['step'] = 'get_block_day_date'
    logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —à–∞–≥: {context.user_data['step']}")  # –õ–æ–≥–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —à–∞–≥
    update_last_active(context)

async def handle_block_day_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == 'stop':
        await start(update, context)
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        block_date = update.message.text
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω—É—é –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD
            block_date_obj = datetime.strptime(block_date, '%d.%m.%Y')
            block_date_formatted = block_date_obj.strftime('%Y-%m-%d')  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ YYYY-MM-DD
            context.user_data['block_date'] = block_date_formatted  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            await update.message.reply_text("üìù –í–≤–µ–¥–∏ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã.")
            context.user_data['step'] = 'get_block_day_reason'
            update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_block_day_date: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_block_day_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        reason = update.message.text
        context.user_data['block_reason'] = reason
        block_date = context.user_data['block_date']  # –î–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
        await update.message.reply_text(f"üîí –£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {block_date}, –∏ –æ—Å—Ç–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–æ–≤ –ø–ª–∞–∫–∞—Ç—å –≤ —É–≥–æ–ª–∫–µ? –í–≤–µ–¥–∏:¬†1¬†(–î–∞),¬†2¬†(–ò–∑–º–µ–Ω–∏—Ç—å),¬†3¬†(–ù–µ—Ç).")
        context.user_data['step'] = 'confirm_block_day'
        update_last_active(context)  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_block_day_reason: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_confirm_block_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–≤–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "STOP"
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return
            
        confirmation = update.message.text.lower()
        if confirmation in ['1', '–¥–∞']:
            block_date = context.user_data['block_date']  # –î–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            reason = context.user_data['block_reason']
            user = update.effective_user

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –≤—Å—Ç—Ä–µ—á–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            cursor.execute("SELECT * FROM schedule WHERE event_date = ?", (block_date,))
            if cursor.fetchone():
                await update.message.reply_text("–í —ç—Ç–æ—Ç –¥–µ–Ω—å —É–∂–µ –µ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏! –†–µ—à–∏ —ç—Ç–æ —Å–Ω–∞—á–∞–ª–∞!")
                await start(update, context)
                context.user_data.clear()
                return

             # –°–æ–∑–¥–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å —Ñ–ª–∞–≥–æ–º is_blocked_day = TRUE
            times = ["19:00", "20:00", "21:00", "22:00", "23:00"]
            for time in times:
                cursor.execute(
                    "INSERT INTO schedule (user_id, event_name, event_date, event_time, is_blocked_day) VALUES (?, ?, ?, ?, ?)",
                    (user.id, reason, block_date, time, True)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ is_blocked_day
                )
            conn.commit()

            await update.message.reply_text(f"üîí –•–æ—Ä–æ—à–æ! –î–µ–Ω—å {block_date} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω! \n–≠—Ö! –£—á–µ–Ω–∏–∫–∏ –±—É–¥—É—Ç –ø–ª–∞–∫–∞—Ç—å –≤ —É–≥–æ–ª–∫–µ. üò¢!")
            await start(update, context)
            context.user_data.clear()
        elif confirmation in ['2', '–∏–∑–º–µ–Ω–∏—Ç—å']:
            await update.message.reply_text("–¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
            context.user_data['step'] = 'get_block_day_date'
        elif confirmation in ['3', '–Ω–µ—Ç']:
            await update.message.reply_text("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. \nüòâ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.")
            await start(update, context)
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏, 1 - –î–∞, 2 - –ò–∑–º–µ–Ω–∏—Ç—å, 3 - –ù–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_block_day: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def manage_users(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    keyboard = [
        [InlineKeyboardButton("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='list_users')],
        [InlineKeyboardButton("üëÄ –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö", callback_data='view_all_progress')],
        [InlineKeyboardButton("üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏", callback_data='manage_statuses')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data='delete_user')],
        [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data='block_user')],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.edit_message_text(text="üë• –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=reply_markup)

async def list_users(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    conn = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞–∫ None
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
        cursor.execute("SELECT full_name, username, status FROM users ORDER BY status")
        users = cursor.fetchall()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        grouped_users = {}
        for full_name, username, status in users:
            if status not in grouped_users:
                grouped_users[status] = []
            grouped_users[status].append((full_name, username))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
        users_text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for status, user_list in grouped_users.items():
            users_text += f"üìå {status}:\n"
            for i, (full_name, username) in enumerate(user_list, start=1):
                users_text += f"{i}. {full_name} (@{username})\n"
            users_text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(users_text, reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_users: {e}", exc_info=True)
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

async def manage_statuses(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("üë§ –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏ –µ–≥–æ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†@–ù–∏–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†@ivanov.")
    context.user_data['step'] = 'get_user_for_status_change'
    update_last_active(context)

async def handle_user_for_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        username = update.message.text
        if not username.startswith('@'):
            await update.message.reply_text("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data['username'] = username
        await update.message.reply_text("ü§î –ö–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –µ–º—É –ø—Ä–∏—Å–≤–æ–∏—Ç—å? \nüìã –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:¬†–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä,¬†–°—Ç—É–¥–µ–Ω—Ç,¬†–í—ã–ø—É—Å–∫–Ω–∏–∫,¬†–ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è,¬†–û—Ç–∫–∞–∑–Ω–∏–∫.")
        context.user_data['step'] = 'get_new_status'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_for_status_change: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_new_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        new_status = update.message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        username = context.user_data['username']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (–ø—Ä–∏–≤–æ–¥–∏–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É)
        valid_statuses = ["–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", "—Å—Ç—É–¥–µ–Ω—Ç", "–≤—ã–ø—É—Å–∫–Ω–∏–∫", "–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è", "–æ—Ç–∫–∞–∑–Ω–∏–∫"]
        if new_status not in valid_statuses:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í–≤–µ–¥–∏ –æ–¥–∏–Ω –∏–∑: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –°—Ç—É–¥–µ–Ω—Ç, –í—ã–ø—É—Å–∫–Ω–∏–∫, –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π—Å—è, –û—Ç–∫–∞–∑–Ω–∏–∫.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ (–∫–∞–∫ –≤–≤–µ–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)
        context.user_data['new_status'] = update.message.text
        await update.message.reply_text(f"üîç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ {username} –Ω–∞ {update.message.text}? –í–≤–µ–¥–∏: 1 (–î–∞), 2 (–ò–∑–º–µ–Ω–∏—Ç—å), 3 (–û—Ç–º–µ–Ω–∏—Ç—å).")
        context.user_data['step'] = 'confirm_status_change'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_new_status: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_confirm_status_change(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        confirmation = update.message.text.lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        if confirmation in ['1', '–¥–∞']:
            username = context.user_data['username'][1:]  # –£–±–∏—Ä–∞–µ–º @
            new_status = context.user_data['new_status']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("UPDATE users SET status = ? WHERE username = ?", (new_status, username))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_username = update.effective_user.username
            cursor.execute("SELECT full_name FROM users WHERE username = ?", (username,))
            full_name = cursor.fetchone()[0]

            for admin in ADMINS:
                if admin != admin_username:
                    cursor.execute("SELECT id, chat_id FROM users WHERE username = ?", (admin,))
                    admin_data = cursor.fetchone()
                    if admin_data:
                        admin_id, chat_id = admin_data
                        if chat_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            try:
                                await context.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} –∏–∑–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {full_name} (@{username}) –Ω–∞ {new_status}!"
                                )
                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id})")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id}): {e}")
                        else:
                            logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –∏–º–µ–µ—Ç chat_id.")
                    else:
                        logger.error(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            await update.message.reply_text(f"‚úÖ @{username} —Ç–µ–ø–µ—Ä—å {new_status}! –í—Å–µ –≤ –∫—É—Ä—Å–µ! üéâ")
            await start(update, context)
            context.user_data.clear()
        elif confirmation in ['2', '–∏–∑–º–µ–Ω–∏—Ç—å']:
            await update.message.reply_text("üë§ –•–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏ –µ–≥–æ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†@–ù–∏–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†@ivanov.")
            context.user_data['step'] = 'get_user_for_status_change'
        elif confirmation in ['3', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            await update.message.reply_text("üö´ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. \nüòâ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            await start(update, context)
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1) –î–∞, 2) –ò–∑–º–µ–Ω–∏—Ç—å, 3) –û—Ç–º–µ–Ω–∏—Ç—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_status_change: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def delete_user(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("üóë –•–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –í–≤–µ–¥–∏ –µ–≥–æ –Ω–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†@–ù–∏–∫_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†@ivanov.")
    context.user_data['step'] = 'get_user_to_delete'
    update_last_active(context)

async def handle_user_to_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        username = update.message.text
        if not username.startswith('@'):
            await update.message.reply_text("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT id FROM users WHERE username = ?", (username[1:],))
        user_id = cursor.fetchone()

        if not user_id:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await start(update, context)
            return

        context.user_data['username'] = username
        await update.message.reply_text(f"üîç–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}? –í–≤–µ–¥–∏:¬†1¬†(–î–∞),¬†2¬†(–û—Ç–º–µ–Ω–∏—Ç—å).")
        context.user_data['step'] = 'confirm_user_deletion'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_to_delete: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_confirm_user_deletion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        confirmation = update.message.text.lower()
        if confirmation in ['1', '–¥–∞']:
            username = context.user_data['username'][1:]  # –£–±–∏—Ä–∞–µ–º @

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT id, full_name FROM users WHERE username = ?", (username,))
            user_data = cursor.fetchone()

            if not user_data:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await start(update, context)
                context.user_data.clear()
                return

            user_id, full_name = user_data

            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute("DELETE FROM users WHERE username = ?", (username,))
            cursor.execute("DELETE FROM schedule WHERE user_id = ?", (user_id,))
            cursor.execute("DELETE FROM progress WHERE user_id = ?", (user_id,))  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_username = update.effective_user.username
            for admin in ADMINS:
                if admin != admin_username:
                    cursor.execute("SELECT id, chat_id FROM users WHERE username = ?", (admin,))
                    admin_data = cursor.fetchone()
                    if admin_data:
                        admin_id, chat_id = admin_data
                        if chat_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            try:
                                await context.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} —É–¥–∞–ª–∏–ª –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {full_name} (@{username})!"
                                )
                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id})")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id}): {e}")
                        else:
                            logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –∏–º–µ–µ—Ç chat_id.")
                    else:
                        logger.error(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            await update.message.reply_text(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–¥–∞–ª—ë–Ω! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç—ë—Ä—Ç—ã. üö´!")
            await start(update, context)
            context.user_data.clear()
        elif confirmation in ['2', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            await update.message.reply_text("üö´ –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\nüòâ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∂–µ.")
            await start(update, context)
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1) –î–∞, 2) –û—Ç–º–µ–Ω–∏—Ç—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_user_deletion: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

async def block_user(update: Update, context: CallbackContext):
    if not is_admin(update.effective_user.username):
        await update.callback_query.edit_message_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. üòä")
        return

    await update.callback_query.edit_message_text("üîí –•–æ—á–µ—à—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? \n–í–≤–µ–¥–∏:¬†–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å¬†–∏–ª–∏¬†–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.")
    context.user_data['step'] = 'get_block_action'
    update_last_active(context)

async def handle_block_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        action = update.message.text.lower()
        if action not in ['–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å']:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å.")
            return

        context.user_data['block_action'] = action
        await update.message.reply_text("ü§î–ö–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å? \nüë§ –í–≤–µ–¥–∏ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:¬†@ivan. \n–ù–∞–ø—Ä–∏–º–µ—Ä:¬†@ivanov.")
        context.user_data['step'] = 'get_user_to_block'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_block_action: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_user_to_block(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        if update.message.text.lower() == 'stop':
            await start(update, context)
            return

        username = update.message.text
        if not username.startswith('@'):
            await update.message.reply_text("‚ùå –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Å–∏–º–≤–æ–ª–∞ @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        context.user_data['username'] = username
        await update.message.reply_text(f"üîç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ —Ö–æ—á–µ—à—å {context.user_data['block_action']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}? –í–≤–µ–¥–∏:¬†1¬†(–î–∞),¬†2¬†(–û—Ç–º–µ–Ω–∏—Ç—å).")
        context.user_data['step'] = 'confirm_block_action'
        update_last_active(context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_user_to_block: {e}", exc_info=True)
    finally:
        if conn:
            conn.close()

async def handle_confirm_block_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = get_db_connection()
    cursor = conn.cursor()
    try:
        confirmation = update.message.text.lower()
        if confirmation in ['1', '–¥–∞']:
            username = context.user_data['username'][1:]  # –£–±–∏—Ä–∞–µ–º @
            action = context.user_data['block_action']

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT id, full_name FROM users WHERE username = ?", (username,))
            user_data = cursor.fetchone()

            if not user_data:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await start(update, context)
                context.user_data.clear()
                return

            user_id, full_name = user_data

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute("UPDATE users SET is_blocked = ? WHERE username = ?", (1 if action == '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' else 0, username))
            conn.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            admin_username = update.effective_user.username
            for admin in ADMINS:
                if admin != admin_username:
                    cursor.execute("SELECT id, chat_id FROM users WHERE username = ?", (admin,))
                    admin_data = cursor.fetchone()
                    if admin_data:
                        admin_id, chat_id = admin_data
                        if chat_id:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chat_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                            try:
                                await context.bot.send_message(
                                    chat_id=chat_id,
                                    text=f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @{admin_username} {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {full_name} (@{username})!"
                                )
                                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id})")
                            except Exception as e:
                                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin} (chat_id: {chat_id}): {e}")
                        else:
                            logger.warning(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –∏–º–µ–µ—Ç chat_id.")
                    else:
                        logger.error(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {admin} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username}{action}! –í—Å–µ –≤ –∫—É—Ä—Å–µ! üéâ")
            await start(update, context)
            context.user_data.clear()
        elif confirmation in ['2', '–æ—Ç–º–µ–Ω–∏—Ç—å']:
            await update.message.reply_text("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. \nüòâ –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
            await start(update, context)
            context.user_data.clear()
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏ 1) –î–∞, 2) –û—Ç–º–µ–Ω–∏—Ç—å.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_block_action: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑. üòä")
    finally:
        if conn:
            conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def handle_text(update: Update, context: CallbackContext):
    # –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    
    try:
        user = update.message.from_user
        text = update.message.text.lower()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "stop"
        if update.message.text.lower() == 'stop':
            context.user_data.clear()  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            await stop_handler(update, context)
            return
            

        # –õ–æ–≥–∏—Ä—É–µ–º –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        text = update.message.text
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –≤–≤–µ–ª: {text}")

        # –û–±–Ω–æ–≤–ª—è–µ–º chat_id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor.execute('''
            UPDATE users SET chat_id = ? WHERE username = ?
        ''', (user.id, user.username))
        conn.commit()
        # –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ chat_id
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username} (chat_id: {user.id}).")    

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–æ—Ç –≤ –≥—Ä—É–ø–ø–µ
        if update.message.chat.type in ['group', 'supergroup']:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
            if context.bot.username.lower() not in text:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç

        # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if update.message.chat.type == 'private':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

        # –ï—Å–ª–∏ —ç—Ç–æ –≥—Ä—É–ø–ø–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        elif update.message.chat.type in ['group', 'supergroup']:
            if context.bot.username.lower() not in text:
                return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ —É–ø–æ–º—è–Ω—É—Ç
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            pass  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞
        if context.user_data.get('step') == 'get_level_code':
            await handle_level_code(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if context.user_data.get('awaiting_add_question'):
            await handle_add_question(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –º–∞—Å—Å–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤
        if context.user_data.get('awaiting_bulk_add_questions'):
            await handle_bulk_add_questions(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if context.user_data.get('awaiting_change_user_level'):
            await handle_change_user_level(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if context.user_data.get('awaiting_delete_question'):
            await handle_delete_question(update, context)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
        if context.user_data.get('awaiting_edit_question'):
            await handle_edit_question(update, context)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –±–æ—Ç–∞
        if 'step' in context.user_data:
            step = context.user_data['step']
            logger.info(f"–¢–µ–∫—É—â–∏–π —à–∞–≥: {step}")

            if step == 'get_full_name':
                await handle_full_name(update, context)    
            elif step == 'get_event_date':
                await handle_event_date(update, context)
            elif step == 'get_event_time':
                await handle_event_time(update, context)
            elif step == 'get_event_topic':
                await handle_event_topic(update, context)
            elif step == 'get_event_to_delete':
                await handle_delete_event(update, context)
            elif step == 'get_event_to_reschedule':
                await handle_reschedule_event(update, context)
            elif step == 'get_new_datetime':
                await handle_new_datetime(update, context)
            elif step == 'get_level_code':
                await handle_level_code(update, context)
            elif step == 'get_broadcast_message':
                await handle_broadcast_message(update, context)
            elif step == 'get_broadcast_recipients':
                await handle_broadcast_recipients(update, context)
            elif step == 'confirm_broadcast':
                await handle_broadcast_confirmation(update, context)
            elif step == 'get_reminder_time':
                await handle_reminder_time(update, context)
            elif step == 'get_one_time_reminder_datetime':
                await handle_one_time_reminder_datetime(update, context)
            elif step == 'get_one_time_reminder_text':
                await handle_one_time_reminder_text(update, context)
            elif step == 'confirm_one_time_reminder':
                await handle_one_time_reminder_confirmation(update, context)
            elif step == 'get_recurring_reminder_time':
                await handle_recurring_reminder_time(update, context)
            elif step == 'get_recurring_reminder_type':
                await handle_recurring_reminder_type(update, context)
            elif step == 'get_recurring_reminder_text':
                await handle_recurring_reminder_text(update, context)
            elif step == 'confirm_recurring_reminder':
                await handle_recurring_reminder_confirmation(update, context)
            elif step == 'get_notification_type_to_delete':
                await handle_notification_type_to_delete(update, context)
            elif step == 'get_one_time_notification_to_delete':
                await handle_one_time_notification_to_delete(update, context)
            elif step == 'get_recurring_notification_type_to_delete':
                await handle_recurring_notification_type_to_delete(update, context)
            elif step == 'get_recurring_notification_to_delete':
                await handle_recurring_notification_to_delete(update, context)
            elif step == 'get_block_day_date':
                await handle_block_day_date(update, context)
            elif step == 'get_block_day_reason':
                await handle_block_day_reason(update, context)
            elif step == 'confirm_block_day':
                await handle_confirm_block_day(update, context)
            elif step == 'get_user_for_status_change':
                await handle_user_for_status_change(update, context)
            elif step == 'get_new_status':
                await handle_new_status(update, context)
            elif step == 'confirm_status_change':
                await handle_confirm_status_change(update, context)
            elif step == 'get_user_to_delete':
                await handle_user_to_delete(update, context)
            elif step == 'confirm_user_deletion':
                await handle_confirm_user_deletion(update, context)
            elif step == 'get_block_action':
                await handle_block_action(update, context)
            elif step == 'get_user_to_block':
                await handle_user_to_block(update, context)
            elif step == 'confirm_block_action':
                await handle_confirm_block_action(update, context)
            elif step == 'get_help_message':
                await handle_help_message(update, context)
            elif step == 'get_user_meeting_reminder_time':
                await handle_user_meeting_reminder_time(update, context)
            elif step == 'get_meeting_reminder_time':
                await handle_meeting_reminder_time(update, context)
            elif step == 'get_broadcast_recipients':
                await handle_broadcast_recipients(update, context)
            elif step == 'get_user_full_name':
                await handle_user_full_name(update, context)
            elif step == 'get_user_username':
                await handle_user_username(update, context)

            # –ï—Å–ª–∏ —à–∞–≥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥: {step}")
                await update.message.reply_text("‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                await start(update, context)
                context.user_data.clear()
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —à–∞–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            await start(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_text: {e}", exc_info=True)
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        if conn:
            conn.close()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handle_mention –î–û main()
async def handle_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º—è–Ω—É—Ç –ª–∏ –±–æ—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if context.bot.username.lower() in update.message.text.lower():
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
        context.user_data['user_id'] = update.effective_user.id
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
        await start(update, context)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é error_handler –î–û main()
async def error_handler(update: Update, context: CallbackContext):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    error_message = (
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
        f"–û—à–∏–±–∫–∞: {context.error}"
    )

    if update.callback_query:
        try:
            await update.callback_query.answer()  # –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
            await update.callback_query.edit_message_text(
                text="‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='back')]])
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏: {e}")
    else:
        await update.message.reply_text("‚ùå  –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {context.error}", exc_info=True)
        
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token("—Ç–æ–∫–µ–Ω_–≤—Å—Ç–∞–≤–ª—è—Ç—å_—Å—é–¥–∞").build() #–í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    application.job_queue.run_once(register_admins, when=0)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(CommandHandler("stop", stop_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_mention))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    application.add_handler(CallbackQueryHandler(set_meeting_reminder_time, pattern='^set_meeting_reminder_time$'))
    application.add_handler(CallbackQueryHandler(set_user_meeting_reminder_time, pattern='^set_user_meeting_reminder_time$'))

    # –ü–æ–ª—É—á–∞–µ–º job_queue –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
    job_queue = application.job_queue

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º-–∞—É—Ç–∞
    job_queue.run_repeating(
        check_state_timeout,
        interval=60.0,
        first=0.0,
        name="check_state_timeout"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    )

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
    job_queue.run_repeating(
        send_meeting_reminders,
        interval=60.0,
        first=0.0,
        name="send_meeting_reminders"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    )

    # –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    job_queue.run_repeating(
        send_one_time_reminder,
        interval=60.0,
        first=0.0,
        name="send_one_time_reminder"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º!)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()
    
if __name__ == '__main__':
    main()